#!/usr/bin/env bash
# shellcheck source-path=../../
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="mount-image - Mount images
Usage:
  mount-image MACHINE
"
# docopt parser below, refresh this parser with `docopt.sh mount-image`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0a3' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:55}
usage=${DOC:27:28};digest=b29f6;options=();node_0(){ value MACHINE a;};cat \
<<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:27:28}" >&2;exit 1;}';local varnames=(MACHINE) varname;for varname in \
"${varnames[@]}"; do unset "var_$varname";done;parse 0 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'MACHINE=${var_MACHINE:-};';local docopt_i=1;[[ $BASH_VERSION =~ \
^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' mount-image`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2153
  local imgpath=$PKGROOT/images/$MACHINE.raw mount_path
  mount_path=$PKGROOT/mnt/$MACHINE
  mkdir -p "$mount_path"
  mount_image "$imgpath" "$mount_path"
  info "image %s mounted at %s, press <ENTER> to unmount" "${imgpath#"$PKGROOT/"}" "${mount_path#"$PKGROOT/"}"
  local _read
  read -rs _read
}


mount_image() {
  local image_path=$1 dev_path
  local mount=mount losetup=losetup
  if [[ $UID != 0 ]]; then
    mount="sudo mount"
    losetup="sudo losetup"
  fi
  if [[ -z $2 ]]; then
    MOUNT_PATH=$(mktemp -d)
  else
    local MOUNT_PATH=$2
  fi
  dev_path=$($losetup --show --find --partscan "$image_path")
  # shellcheck disable=SC2064
  if [[ -z $2 ]]; then
    trap "umount_image \"$MOUNT_PATH\" \"$dev_path\" true" EXIT SIGINT SIGTERM
  else
    trap "umount_image \"$MOUNT_PATH\" \"$dev_path\" false" EXIT SIGINT SIGTERM
  fi
  if [[ -b ${dev_path}p1 ]]; then
    $mount "${dev_path}p2" "$MOUNT_PATH"
    $mount "${dev_path}p1" "$MOUNT_PATH/boot/efi"
  else
    $mount "$dev_path" "$MOUNT_PATH"
  fi
}

umount_image() {
  local mount_path=$1 dev_path=$2 rm_mountpath=$3 timeout ret=0
  local umount=umount losetup=losetup
  if [[ $UID != 0 ]]; then
    umount="sudo umount"
    losetup="sudo losetup"
  fi
  if [[ -b ${dev_path}p1 ]]; then
    $umount -l "$mount_path/boot/efi" "$mount_path" || ret=$?
  else
    $umount -l "$mount_path" || ret=$?
  fi
  if [[ $ret != 0 ]] ; then
    warning "Failed to unmount %s" "$mount_path"
  else
    timeout=1000
    while mount | grep -q "$mount_path"; do
      sleep .1; timeout=$((timeout-100))
      [[ $timeout -gt 0 ]] || { warning "Timed out waiting for %s to unmount" "$mount_path"; break; }
    done
  fi
  if ! $losetup --detach "$dev_path"; then
    warning "Failed to detach loopdevice %s" "$dev_path"
    ret=1
  fi
  if $rm_mountpath; then
    if ! rmdir "$mount_path"; then
      warning "Unable to remove mount path %s" "$mount_path"
    fi
  fi
  return $ret
}


main "$@"
