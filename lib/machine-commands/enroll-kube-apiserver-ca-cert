#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="kube-apiserver-cert - Manage the Smallstep kube-apiserver Client CA
Usage:
  enroll-kube-apiserver-cert
"
# docopt parser below, refresh this parser with `docopt.sh enroll-kube-apiserver-ca-cert`
# shellcheck disable=2016,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:103}; usage=${DOC:68:35}; digest=1852c; shorts=(); longs=()
argcounts=(); node_0(){ required ; }; node_1(){ required 0; }
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:68:35}" >&2; exit 1; }'; unset ; parse 1 "$@"; return 0
local prefix=${DOCOPT_PREFIX:-''}; unset ; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p ; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' enroll-kube-apiserver-ca-cert`
  eval "$(docopt "$@")"
  confirm_machine_id k8sMaster

  local kube_apiserver_client_ca_cert
  info "Waiting for the kube-apiserver client CA secret to be created"
  local max_wait=300 wait_left=300
  until kube_apiserver_client_ca_cert=$(kubectl -n smallstep get secret kube-apiserver-client-ca -o=jsonpath='{.data.tls\.crt}' 2>/dev/null | base64 -d); do
    sleep 1
    ((--wait_left > 0)) || fatal "Timed out after %d seconds waiting for the kube-apiserver client CA secret to be created." "$max_wait"
  done

  local bundle ca_cert_bundle_path=/var/lib/rancher/k3s/server/tls/client-ca-bundle.crt
  bundle=$(cat /var/lib/rancher/k3s/server/tls/client-ca.crt; printf "%s\n" "$kube_apiserver_client_ca_cert")
  if [[ ! -L $ca_cert_bundle_path ]]; then
    if [[ $(cat "$ca_cert_bundle_path") = "$bundle" ]]; then
      info "The kube-apiserver client CA is already enrolled in k3s"
      return 0
    else
      info "The k3s client CA bundle is not up-to-date"
    fi
  else
    info "The kube-apiserver client CA is not enrolled"
  fi

  local k3s_is_running=true
  systemctl status enroll-kube-apiserver-client-ca.service >/dev/null 2>&1 || k3s_is_running=false
  if $k3s_is_running; then
    info "Stopping k3s"
    systemctl stop k3s
  fi

  info "Adding kube-apiserver client CA to k3s client-ca.crt file"
  rm "$ca_cert_bundle_path"
  printf "%s\n" "$bundle" >"$ca_cert_bundle_path"

  if $k3s_is_running; then
    info "Starting k3s"
    systemctl start --no-block k3s
  fi
}

main "$@"
