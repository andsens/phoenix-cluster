#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="ssh-keys - Manage ssh-keys
Usage:
  ssh-keys sign-host
  ssh-keys download-ca DEST
"
# docopt parser below, refresh this parser with `docopt.sh ssh-keys`
# shellcheck disable=2016,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:82}; usage=${DOC:27:55}; digest=4c10f; shorts=(); longs=()
argcounts=(); node_0(){ value DEST a; }; node_1(){ _command sign_host sign-host
}; node_2(){ _command download_ca download-ca; }; node_3(){ required 1; }
node_4(){ required 2 0; }; node_5(){ either 3 4; }; node_6(){ required 5; }
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:27:55}" >&2; exit 1; }'; unset var_DEST var_sign_host \
var_download_ca; parse 6 "$@"; local prefix=${DOCOPT_PREFIX:-''}
unset "${prefix}DEST" "${prefix}sign_host" "${prefix}download_ca"
eval "${prefix}"'DEST=${var_DEST:-}'
eval "${prefix}"'sign_host=${var_sign_host:-false}'
eval "${prefix}"'download_ca=${var_download_ca:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}DEST" "${prefix}sign_host" "${prefix}download_ca"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' ssh-keys`
  eval "$(docopt "$@")"

  info "Waiting for step-ca to become ready"
  max_wait=300 wait_left=300
  until [[ $(kubectl get -n smallstep sts step-ca -ojsonpath='{.status.readyReplicas}' 2>&1) = 1 ]]; do
    sleep 1
    ((--wait_left > 0)) || fatal "Timed out after %d seconds waiting for step-ca to become ready" "$max_wait"
  done

  if [[ ! -e "$(step path)/certs/root_ca.crt" ]]; then
    info "Bootstrapping Smallstep"
    step ca bootstrap \
      --ca-url "pki.$(get_setting cluster.domain):9000" \
      --fingerprint "$(step certificate fingerprint <(kubectl -n smallstep get secret smallstep-root -o=jsonpath='{.data.tls\.crt}' | base64 -d))"
  fi
  # shellcheck disable=2154
  if $sign_host; then
    local ssh_host_provisioner_password
    ssh_host_provisioner_password=$(kubectl -n smallstep get secret ssh-host-provisioner-password -o=jsonpath='{.data.password}' | base64 -d)
    local pubkey
    for pubkey in /etc/ssh/ssh_host_*.pub; do
      [[ $pubkey != *-cert.pub ]] || continue
      info "Signing %s" "$pubkey"
      step ssh certificate --host --sign --force --provisioner=ssh-host --provisioner-password-file=<(printf "%s" "$ssh_host_provisioner_password") \
        "$(hostname -f)" "$pubkey"
    done
    systemctl reload ssh
  elif $download_ca; then
    info "Downloading user CA keys to %s" "$DEST"
    step ssh config --host --roots >"$DEST"
    systemctl reload ssh
  fi
}

main "$@"
