#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="create-k3s-registry-config - Creates a registry config for k3s
Usage:
  create-k3s-registry-config [options]

Options:
  -u --username USERNAME  The registry username [default: kubernetes]
  -p --password PASSWORD  The registry password [default: random]

Note:
  The password will be read by docker_auth and embedded in the config
"
# docopt parser below, refresh this parser with `docopt.sh create-k3s-registry-config`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0a3' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:331};usage=${DOC:63:45};digest=14687;options=('-u --userna'\
'me 1' '-p --password 1');node_0(){ value __username 0;};node_1(){ value \
__password 1;};node_2(){ optional 0 1;};cat <<<' docopt_exit() { [[ -n $1 ]] \
&& printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:63:45}" >&2;exit 1;}';local \
varnames=(__username __password) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 2 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'__username=${v'\
'ar___username:-kubernetes};'$p'__password=${var___password:-random};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' create-k3s-registry-config`
  eval "$(docopt "$@")"

  if [[ $__password = 'random' ]]; then
    # tr complains about broken pipe once head has read enough, ignore it
    __password=$(tr -dc A-Za-z0-9_- </dev/urandom 2>/dev/null | head -c 32) || true
  fi

  mkdir -p /etc/rancher/k3s
  umask 077
  # shellcheck disable=SC2016,SC2154
  yq -y --arg domain "$(get_setting cluster.domain)" --arg username "$__username" --arg password "$__password" \
  '.mirrors["cr.\($domain)"].endpoint=["https://cr.\($domain)/v2"] |
  .configs["cr.\($domain)"].auth.username=$username |
  .configs["cr.\($domain)"].auth.password=$password' <<<'{}' >/etc/rancher/k3s/registries.yaml
}

main "$@"
