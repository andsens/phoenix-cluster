#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="kube-apiserver-cert - Manage the Smallstep kube-apiserver Client CA
Usage:
  kube-apiserver-cert enroll-ca
  kube-apiserver-cert issue-client [--group=NAME...] USER
"
# docopt parser below, refresh this parser with `docopt.sh kube-apiserver-cert`
# shellcheck disable=2016,1090,1091,2034,2154
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:164}; usage=${DOC:68:96}; digest=3006d; shorts=('')
longs=(--group); argcounts=(1); node_0(){ value __group 0 true; }; node_1(){
value USER a; }; node_2(){ _command enroll_ca enroll-ca; }; node_3(){
_command issue_client issue-client; }; node_4(){ required 2; }; node_5(){
oneormore 0; }; node_6(){ optional 5; }; node_7(){ required 3 6 1; }; node_8(){
either 4 7; }; node_9(){ required 8; }; cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2; printf "%s\n" "${DOC:68:96}" >&2; exit 1
}'; unset var___group var_USER var_enroll_ca var_issue_client; parse 9 "$@"
local prefix=${DOCOPT_PREFIX:-''}; unset "${prefix}__group" "${prefix}USER" \
"${prefix}enroll_ca" "${prefix}issue_client"
if declare -p var___group >/dev/null 2>&1; then
eval "${prefix}"'__group=("${var___group[@]}")'; else
eval "${prefix}"'__group=()'; fi; eval "${prefix}"'USER=${var_USER:-}'
eval "${prefix}"'enroll_ca=${var_enroll_ca:-false}'
eval "${prefix}"'issue_client=${var_issue_client:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}__group" "${prefix}USER" "${prefix}enroll_ca" \
"${prefix}issue_client"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' kube-apiserver-cert`
  eval "$(docopt "$@")"

  # shellcheck disable=2154
  if $enroll_ca; then
    confirm_machine_id k8sMaster

    local kube_apiserver_client_ca_cert
    info "Waiting for the kube-apiserver client CA secret to be created"
    local max_wait=300 wait_left=300
    until kube_apiserver_client_ca_cert=$(kubectl -n smallstep get secret kube-apiserver-client-ca -o=jsonpath='{.data.tls\.crt}' 2>/dev/null | base64 -d); do
      sleep 1
      ((--wait_left > 0)) || fatal "Timed out after %d seconds waiting for the kube-apiserver client CA secret to be created." "$max_wait"
    done

    local bundle ca_cert_bundle_path=/var/lib/rancher/k3s/server/tls/client-ca-bundle.crt
    bundle=$(cat /var/lib/rancher/k3s/server/tls/client-ca.crt; printf "%s\n" "$kube_apiserver_client_ca_cert")
    if [[ ! -L $ca_cert_bundle_path ]]; then
      if [[ $(cat "$ca_cert_bundle_path") = "$bundle" ]]; then
        info "The kube-apiserver client CA is already enrolled in k3s"
        return 0
      else
        info "The k3s client CA bundle is not up-to-date"
      fi
    else
      info "The kube-apiserver client CA is not enrolled"
    fi

    info "Stopping k3s"
    systemctl stop k3s

    info "Adding kube-apiserver client CA to k3s client-ca.crt file"
    rm "$ca_cert_bundle_path"
    printf "%s\n" "$bundle" >"$ca_cert_bundle_path"

    info "Starting k3s"
    systemctl start k3s
  elif $issue_cert; then
    confirm_machine_id truenas
    local step_ca_certs_path
    step_ca_certs_path=$(get_setting "nfsShares.workloads.path")/smallstep/step-ca-certs
    step certificate create --template=<(printf '{
  "subject": {
    "commonName": {{ toJson .Subject.CommonName }},
		"extraNames": {{ toJson .Insecure.User.ExtraNames }}
  },
  "keyUsage": ["keyEncipherment", "digitalSignature"],
  "extKeyUsage": ["clientAuth"]}') \
      --no-password --insecure \
      --not-after=87600h \
      --ca="$step_ca_certs_path/kube_apiserver_client_ca.crt" --ca-key="$step_ca_certs_path/kube_apiserver_client_ca_key" \
      --set ExtraNames="$(jq -Rn '[inputs] | map({"type":"2.5.4.10", "value": .})' <<<"$(printf "%s\n" "${__group[@]}")")" \
      "$USER" "$PWD/${USER//'/'/_}.crt" "$PWD/${USER//'/'/_}_key"
  fi
}

main "$@"
