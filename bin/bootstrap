#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap (-u MACHINE|-p MACHINE)...

Options:
  -u --uefi MACHINE  Bootstrap an UEFI boot image
  -p --pxe MACHINE   Bootstrap a PXE boot image
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0a3' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:182};usage=${DOC:29:45};digest=b98b7;options=('-u --uefi 1'\
 '-p --pxe 1');node_0(){ value __uefi 0 true;};node_1(){ value __pxe 1 true;}
node_2(){ choice 0 1;};node_3(){ repeatable 2;};cat <<<' docopt_exit() { [[ -n \
$1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:29:45}" >&2;exit 1;}'
local varnames=(__uefi __pxe) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 3 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;if declare -p \
var___uefi >/dev/null 2>&1; then eval $p'__uefi=("${var___uefi[@]}")';else
eval $p'__uefi=()';fi;if declare -p var___pxe >/dev/null 2>&1; then eval $p'__'\
'pxe=("${var___pxe[@]}")';else eval $p'__pxe=()';fi;eval ;local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  mkdir -p \
    "$PKGROOT/images/snapshots" \
    "$PKGROOT/images/raw" \
    "$PKGROOT/images/squashfs" \
    "$PKGROOT/images/initrd"

  local machine ret=0 cur_ret
  # shellcheck disable=SC2154
  for machine in "${__uefi[@]}"; do
    info "Bootstrapping %s" "$machine"
    cur_ret=0
    create_dockerfile "$machine"
    set +e
    bootstrap "$machine" && \
    uefi "$machine"
    cur_ret=$?; set -e
    if [[ $cur_ret -eq 0 ]]; then
      info "Successfully bootstrapped %s" "$machine"
    else
      error "Failed to bootstrap %s" "$machine"
      rm -f "$PKGROOT/images/$machine.raw"
      ret=1
    fi
  done
  # shellcheck disable=SC2154
  for machine in "${__pxe[@]}"; do
    info "Bootstrapping %s" "$machine"
    cur_ret=0
    create_dockerfile "$machine"
    set +e
    bootstrap "$machine" && \
    pxe "$machine"
    cur_ret=$?; set -e
    if [[ $cur_ret -eq 0 ]]; then
      info "Successfully bootstrapped %s" "$machine"
    else
      error "Failed to bootstrap %s" "$machine"
      rm -f "$PKGROOT/images/$machine.raw"
      ret=1
    fi
  done
  return $ret
}

create_dockerfile() {
  local machine=$1
  mkdir -p "$PKGROOT/images/dockerfile"
  docker build \
    --file "$PKGROOT/workloads/kaniko/containers/home-cluster-base/Dockerfile" \
    --tag cr.$CLUSTER_DOMAIN/home-cluster-base \
    "$PKGROOT"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/dockerfiles:/images/dockerfiles:rw" \
    cr.$CLUSTER_DOMAIN/home-cluster-base \
    /var/lib/home-cluster/workloads/bootstrap/commands/create-dockerfile.sh "$machine"
}

bootstrap() {
  local machine=$1
  mkdir -p "$PKGROOT/images/snapshots"
  docker run --rm -ti \
    -v "$PKGROOT:/workspace:ro" \
    -v "$PKGROOT/images:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --build-arg "MACHINE=$machine" \
    --destination "distribution.docker-registry.svc.cluster.local/${machine,,}" \
    --insecure-registry=distribution.docker-registry.svc.cluster.local \
    --skip-tls-verify \
    --tar-path "/workspace/images/snapshots/$machine.tar" \
    --no-push \
    --dockerfile "images/dockerfiles/$machine.Dockerfile"
}

uefi() {
  docker build \
    --file "$PKGROOT/workloads/bootstrap/containers/create-uefi-boot-image/Dockerfile" \
    --tag cr.$CLUSTER_DOMAIN/create-uefi-boot-image \
    "$PKGROOT"
  mkdir -p "$PKGROOT/images/raw"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/snapshots:/images/snapshots:rw" \
    -v "$PKGROOT/images/raw:/images/raw:rw" \
    --privileged \
    --volume /dev:/dev \
    cr.$CLUSTER_DOMAIN/create-uefi-boot-image "$machine"
}

pxe() {
  docker build \
    --file "$PKGROOT/workloads/bootstrap/containers/create-pxe-boot-image/Dockerfile" \
    --tag cr.$CLUSTER_DOMAIN/create-pxe-boot-image \
    "$PKGROOT"
  mkdir -p "$PKGROOT/images/squashfs" "$PKGROOT/images/kernels"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/snapshots:/images/snapshots:rw" \
    -v "$PKGROOT/images/squashfs:/images/squashfs:rw" \
    -v "$PKGROOT/images/kernels:/images/kernels:rw" \
    cr.$CLUSTER_DOMAIN/create-pxe-boot-image "$machine"
}

main "$@"
