#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
export DOCKER_CLI_HINTS=false

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/bgpid/bgpid.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap [options] VARIANT

Options:
  --debug  Enable debug build (installs debug tools, no artifact cleanup, etc.)
  --upload URL  Upload artifacts to the specified WebDAV server URL

Supported variants:
  amd64 - x86_64 image
  arm64 - ARM 64-bit image
  rpi5 - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:358};usage=${DOC:29:36}
digest=db197;options=(' --debug 0' ' --upload 1');node_0(){ switch __debug 0;}
node_1(){ value __upload 1;};node_2(){ value VARIANT a;};node_3(){ optional 0 1
};node_4(){ sequence 3 2;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf \
"%s\n" "$1" >&2;printf "%s\n" "${DOC:29:36}" >&2;exit 1;}';local \
varnames=(__debug __upload VARIANT) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 4 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'__debug=${var_'\
'__debug:-false};'$p'__upload=${var___upload:-};'$p'VARIANT=${var_VARIANT:-};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  local DEBUG=$__debug DOCKER_PLATFORM
  case $VARIANT in
    amd64) DOCKER_PLATFORM=linux/amd64 ;;
    arm64|rpi*) DOCKER_PLATFORM=linux/arm64 ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac

  local create_boot_image_tag
  create_boot_image_tag=$(yq -r '.images[] | select(.name == "ghcr.io/andsens/phxc-create-boot-image") | .newTag' "$PKGROOT/workloads/bootstrap/kustomization.yaml")

  local artifacts
  artifacts=$PKGROOT/images/$VARIANT.tmp
  $DEBUG || trap_append "rm -rf \"$artifacts\"" EXIT
  rm -rf "$artifacts"
  mkdir -p "$artifacts"

  local bundle
  bundle=$(mktemp --suffix '-phxc-bundle.tar.gz')
  trap_append "rm \"$bundle\"" EXIT
  "$PKGROOT/bootstrap/scripts/bundle" "$bundle"

  local create_boot_image_opts=(--chown $UID)
  # shellcheck disable=SC2154
  ! $__upload || create_boot_image_opts+=(--upload "$__upload")

  info "Building '%s'" "node:$VARIANT"
  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    -v "$PKGROOT/workloads/bootstrap/Dockerfile:/workspace/context/Dockerfile:ro" \
    -v "$bundle:/workspace/phxc.tar.gz:ro" \
    -v "$artifacts:/workspace/artifacts:rw" \
    gcr.io/kaniko-project/executor:latest \
    --dockerfile context/Dockerfile \
    --build-arg "VARIANT=$VARIANT" \
    --build-arg "DEBUG=$DEBUG" \
    --custom-platform="$DOCKER_PLATFORM" \
    --destination "cluster.local/node:$VARIANT" \
    --insecure-registry=cluster.local \
    --tar-path "/workspace/artifacts/node.tar" \
    --no-push

  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    -v "$PKGROOT/bootstrap/assets:/assets:ro" \
    -v "$PKGROOT/workloads/bootstrap/scripts:/scripts:ro" \
    -v "$artifacts:/workspace/artifacts:rw" \
    -e "VARIANT=$VARIANT" \
    -e "DEBUG=$DEBUG" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    "ghcr.io/andsens/phxc-create-boot-image:$create_boot_image_tag" "${create_boot_image_opts[@]}"

  rm -rf "$PKGROOT/images/$VARIANT.old"
  mv "$PKGROOT/images/$VARIANT" "$PKGROOT/images/$VARIANT.old"
  mv "$artifacts" "$PKGROOT/images/$VARIANT"
}

main "$@"
