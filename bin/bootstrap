#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap [MACHINE...]
"
# docopt parser below, refresh this parser with `docopt.sh cbootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0a3' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:60}
usage=${DOC:29:31};digest=39729;options=();node_0(){ value MACHINE a true;}
node_1(){ repeatable 0;};node_2(){ optional 1;};cat <<<' docopt_exit() { [[ -n \
$1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:29:31}" >&2;exit 1;}'
local varnames=(MACHINE) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 2 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;if declare -p var_MACHINE \
>/dev/null 2>&1; then eval $p'MACHINE=("${var_MACHINE[@]}")';else eval $p'MACH'\
'INE=()';fi;eval ;local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2
for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare \
-p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' cbootstrap`
  eval "$(docopt "$@")"

  local machine ret=0 cur_ret
  # shellcheck disable=SC2153
  for machine in "${MACHINE[@]}"; do
    info "Bootstrapping %s" "$machine"
    cur_ret=0
    set +e; (set -e; bootstrap "$machine"); cur_ret=$?; set -e
    if [[ $cur_ret -eq 0 ]]; then
      info "Successfully bootstrapped %s" "$machine"
    else
      error "Failed to bootstrap %s" "$machine"
      rm -f "$PKGROOT/images/$machine.raw"
      ret=1
    fi
  done
  return $ret
}

bootstrap() {
  local machine=$1
  "$PKGROOT/workloads/bootstrap/commands/create-dockerfile.sh" "$machine"
  docker run --rm \
    -v "$PKGROOT:/workspace:rw" \
    -v "$PKGROOT/images:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --build-arg "MACHINE=$machine" \
    --destination "distribution.docker-registry.svc.cluster.local/${machine,,}" \
    --insecure-registry=distribution.docker-registry.svc.cluster.local \
    --skip-tls-verify \
    --tar-path "/workspace/images/$machine.tar" \
    --no-push \
    --dockerfile "images/$MACHINE.Dockerfile"
  docker build \
    --file "$PKGROOT/workloads/bootstrap/containers/create-boot-image/Dockerfile" \
    --tag pki.$CLUSTER_DOMAIN/create-boot-image \
    "$PKGROOT"
  # shellcheck disable=SC2154
  docker run --rm \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images:/var/lib/home-cluster/images:rw" \
    --privileged \
    --volume /dev:/dev \
    pki.$CLUSTER_DOMAIN/create-boot-image "/var/lib/home-cluster/images/$machine.tar"
}

main "$@"
