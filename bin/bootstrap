#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap uefi [-f FORMAT] MACHINE
  bootstrap pxe MACHINE

Options:
  -f --format FORMAT  The desired image format [default: raw]
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0a3' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:168};usage=${DOC:29:67};digest=2ceb1;options=('-f --format'\
' 1');node_0(){ value __format 0;};node_1(){ value MACHINE a;};node_2(){
switch uefi a:uefi;};node_3(){ switch pxe a:pxe;};node_4(){ sequence 2 5 1;}
node_5(){ optional 0;};node_6(){ sequence 3 1;};node_7(){ choice 4 6;};cat \
<<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:29:67}" >&2;exit 1;}';local varnames=(__format MACHINE uefi pxe) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 7 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__format=${var___format:-raw};'$p'MACHINE=${var_MACH'\
'INE:-};'$p'uefi=${var_uefi:-false};'$p'pxe=${var_pxe:-false};';local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do
for varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2153
  create_dockerfile "$MACHINE"
  bootstrap "$MACHINE"
  # shellcheck disable=SC2154
  if $uefi; then
    uefi "$MACHINE" "$__format"
  else
    pxe "$MACHINE"
  fi
}

create_dockerfile() {
  local machine=$1
  mkdir -p "$PKGROOT/images/dockerfiles"
  docker build \
    --file "$PKGROOT/workloads/kaniko/containers/home-cluster-base/alpine.Dockerfile" \
    --tag distribution.docker-registry.svc.cluster.local/home-cluster-base:alpine \
    "$PKGROOT"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/dockerfiles:/images/dockerfiles:rw" \
    distribution.docker-registry.svc.cluster.local/home-cluster-base:alpine \
    /var/lib/home-cluster/workloads/bootstrap/commands/create-dockerfile.sh "$machine"
  # Prepend the home-cluster-base Dockerfile
  cat \
    "$PKGROOT/workloads/kaniko/containers/home-cluster-base/debian.Dockerfile" \
    <(tail -n+2 "$PKGROOT/images/dockerfiles/$machine.Dockerfile") \
    >"$PKGROOT/images/dockerfiles/$machine.local.Dockerfile"
}

bootstrap() {
  local machine=$1
  mkdir -p "$PKGROOT/images/snapshots"
  docker build \
    --file "$PKGROOT/workloads/kaniko/containers/home-cluster-base/debian.Dockerfile" \
    --tag distribution.docker-registry.svc.cluster.local/home-cluster-base:debian \
    "$PKGROOT"
  docker run --rm -ti \
    -v "$PKGROOT:/workspace:ro" \
    -v "$PKGROOT/images:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --build-arg "MACHINE=$machine" \
    --destination distribution.docker-registry.svc.cluster.local/non-existent \
    --insecure-registry=distribution.docker-registry.svc.cluster.local \
    --skip-tls-verify \
    --tar-path "/workspace/images/snapshots/$machine.tar" \
    --no-push \
    --dockerfile "images/dockerfiles/$machine.local.Dockerfile"
}

uefi() {
  local machine=$1 format=$2
  docker build \
    --file "$PKGROOT/workloads/bootstrap/containers/create-uefi-boot-image/Dockerfile" \
    --tag distribution.docker-registry.svc.cluster.local/create-uefi-boot-image \
    "$PKGROOT"
  mkdir -p "$PKGROOT/images/raw"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/snapshots:/images/snapshots:rw" \
    -v "$PKGROOT/images/raw:/images/raw:rw" \
    --privileged \
    --volume /dev:/dev \
    distribution.docker-registry.svc.cluster.local/create-uefi-boot-image "$machine" --format "$format"
}

pxe() {
  local machine=$1
  docker build \
    --file "$PKGROOT/workloads/bootstrap/containers/create-pxe-boot-image/Dockerfile" \
    --tag distribution.docker-registry.svc.cluster.local/create-pxe-boot-image \
    "$PKGROOT"
  mkdir -p "$PKGROOT/images/squashfs" "$PKGROOT/images/kernels"
  docker run --rm -ti \
    -v "$PKGROOT:/var/lib/home-cluster:ro" \
    -v "$PKGROOT/images/snapshots:/images/snapshots:rw" \
    -v "$PKGROOT/images/squashfs:/images/squashfs:rw" \
    -v "$PKGROOT/images/kernels:/images/kernels:rw" \
    distribution.docker-registry.svc.cluster.local/create-pxe-boot-image "$machine"
}

main "$@"
