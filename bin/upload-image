#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
export DOCKER_CLI_HINTS=false

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/bgpid/bgpid.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  source "$PKGROOT/lib/options.sh"
  # shellcheck source=workloads/settings/env/settings.shellcheck.sh
  source "$PKGROOT/workloads/settings/env/settings.sh"
  eval_settings

  DOC="upload-image - Upload the latest bootstrapped image to the boot-server
Usage:
  upload-image VARIANT

Supported variants:
  amd64 - Standard x86_64 image
  arm64 - ARM 64-bit image
  rpi5 - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh upload-image`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:244};usage=${DOC:71:29}
digest=01fd9;options=();node_0(){ value VARIANT a;};cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:71:29}" >&2;exit 1;}'
local varnames=(VARIANT) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 0 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval $p'VARIANT=${var_VARIANT:-};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' upload-image`
  eval "$(docopt "$@")"

  case $VARIANT in
    amd64|arm64|rpi*) ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac
  local imagepath=$PKGROOT/startup/images/$VARIANT control_plane_hostname jwt

  jwt=$(step crypto jwt sign --issuer admin --aud boot-server --sub image-upload --nbf "$(date -d'-30sec' +%s)" --exp "$(date -d'+30sec' +%s)")
  control_plane_hostname=$(get_control_plane_hostname)
  curl --cacert "$PKGROOT/startup/step/certs/root_ca.crt" \
    -fL --no-progress-meter --connect-timeout 5 --retry 3 \
    -XPUT -F image=@<(cd "$imagepath"; tar -c -- *) \
    --connect-to "boot-server.node.svc.cluster.local:8020:$control_plane_hostname:8020" \
    "https://boot-server.node.svc.cluster.local:8020/images/$VARIANT?jwt=$jwt"
}

main "$@"
