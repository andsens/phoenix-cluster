#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
export DOCKER_CLI_HINTS=false

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/bgpid/bgpid.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  source "$PKGROOT/lib/options.sh"
  # shellcheck source=workloads/settings/env/settings.shellcheck.sh
  source "$PKGROOT/workloads/settings/env/settings.sh"
  eval_settings

  DOC="startup - Bootstrap images or run the boot-server
Usage:
  startup bootstrap VARIANT
  startup boot-server [-h HOST_IP]

Options:
  -h --host-ip HOST_IP  The host IP the boot-server should bind to.
                        Prompts if not set and more than one is available.

Supported variants:
  amd64 - Standard x86_64 image
  arm64 - ARM 64-bit image
  rpi5 - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh startup`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:416};usage=${DOC:50:69}
digest=a261c;options=('-h --host-ip 1');node_0(){ value __host_ip 0;};node_1(){
value VARIANT a;};node_2(){ switch bootstrap a:bootstrap;};node_3(){ switch \
boot_server a:boot-server;};node_4(){ sequence 2 1;};node_5(){ sequence 3 6;}
node_6(){ optional 0;};node_7(){ choice 4 5;};cat <<<' docopt_exit() { [[ -n \
$1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:50:69}" >&2;exit 1;}'
local varnames=(__host_ip VARIANT bootstrap boot_server) varname;for varname \
in "${varnames[@]}"; do unset "var_$varname";done;parse 7 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__host_ip=${var___host_ip:-};'$p'VARIANT=${var_VARIANT:-};'$p'boo'\
'tstrap=${var_bootstrap:-false};'$p'boot_server=${var_boot_server:-false};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' startup`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  if $bootstrap; then
    initialize
    bootstrap "$VARIANT"
  elif $boot_server; then
    initialize
    boot_server "$__host_ip"
  fi
}

initialize() {
  STARTUP=$PKGROOT/startup
  IMAGES=$STARTUP/images
  mkdir -p "$STARTUP"

  export STEPPATH=$STARTUP/step
  mkdir -p "$STEPPATH/certs" "$STEPPATH/secrets" "$STEPPATH/config"
  ROOT_CRT=$STEPPATH/certs/root_ca.crt
  ROOT_KEY=$STEPPATH/secrets/root_ca_key
  INTERMEDIATE_CRT=$STEPPATH/certs/intermediate_ca.crt
  INTERMEDIATE_KEY=$STEPPATH/secrets/intermediate_ca_key

  init_certs
}

bootstrap() {
  VARIANT=$1
  local DOCKER_PLATFORM ARCH
  case $VARIANT in
    amd64)
    DOCKER_PLATFORM=linux/amd64
    ARCH=amd64
    ;;
    arm64|rpi*)
    DOCKER_PLATFORM=linux/arm64
    ARCH=arm64
    ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac

  local bundle
  bundle=$(mktemp --suffix .tar.gz)
  trap_append "rm \"$bundle\"" EXIT
  "$PKGROOT/workloads/node/bin/bundle" "$bundle"

  SB_CRT=$STEPPATH/certs/secureboot.crt
  SB_KEY=$STEPPATH/certs/secureboot.key
  if [[ ! -e $SB_CRT ]]; then
    # Key *must* be RSA. When sbsign signs the UKI it always specifies that the key is RSA regardless of the facts.
    step certificate create --template <(printf '{
  "subject": {{ toJson .Subject }},
  "keyUsage": ["digitalSignature"],
  "extKeyUsage": ["codeSigning"]
}') --force --insecure --no-password --not-after $((20*365*24))h --kty RSA \
    --ca "$INTERMEDIATE_CRT" --ca-key "$INTERMEDIATE_KEY" \
    "home-cluster Secure Boot" "$SB_CRT" "$SB_KEY"
  fi

  # shellcheck disable=SC2154
  rm -rf "$IMAGES/$VARIANT.new"
  mkdir "$IMAGES/$VARIANT.new"

  if [[ ! -e "$IMAGES/containers/create-boot-image-$ARCH.tar" ]] || \
     find "$PKGROOT/workloads/node/containers/create-boot-image" "$PKGROOT/workloads/common-context" \
       -newer "$IMAGES/containers/create-boot-image-$ARCH.tar" 2>/dev/null | grep -q .; then
    info "Building '%s'" "create-boot-image:$ARCH"
    mkdir -p "$IMAGES/containers"
    docker run --rm -ti \
      --platform "$DOCKER_PLATFORM" \
      -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
      -v "$PKGROOT/workloads/node/containers/create-boot-image:/workspace/context:ro" \
      -v "$IMAGES:/workspace/images:rw" \
      gcr.io/kaniko-project/executor:latest \
      --dockerfile context/Dockerfile \
      --build-arg "ARCH=$ARCH" \
      --custom-platform="$DOCKER_PLATFORM" \
      --destination "cluster.local/create-boot-image:$ARCH" \
      --tar-path "/workspace/images/containers/create-boot-image-$ARCH.tar" \
      --no-push
    docker load -i "$IMAGES/containers/create-boot-image-$ARCH.tar"
  else
    info "Not building '%s', no files have changed since last run" "create-boot-image:$ARCH"
  fi

  info "Building '%s'" "node:$VARIANT"
  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    -v "$PKGROOT/workloads/node/bootstrap/Dockerfile:/workspace/context/Dockerfile:ro" \
    -v "$bundle:/workspace/home-cluster.tar.gz:ro" \
    -v "$ROOT_CRT:/workspace/root_ca.crt:ro" \
    -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
    -v "$IMAGES:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --dockerfile context/Dockerfile \
    --build-arg "VARIANT=$VARIANT" \
    --custom-platform="$DOCKER_PLATFORM" \
    --destination "cluster.local/node:$VARIANT" \
    --insecure-registry=cluster.local \
    --tar-path "/workspace/images/$VARIANT.new/node.tar" \
    --no-push

  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    --mount type=bind,src="$SB_KEY",dst=/secureboot/tls.key,readonly \
    --mount type=bind,src="$SB_CRT",dst=/secureboot/tls.crt,readonly \
    -v "$PKGROOT/workloads/node/bootstrap/create-boot-image-assets:/assets:ro" \
    -v "$PKGROOT/workloads/node/bootstrap/scripts:/scripts:ro" \
    -v "$IMAGES:/images:rw" \
    -e "VARIANT=$VARIANT" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    -e CHOWN=$UID:$UID \
    "cluster.local/create-boot-image:$ARCH"
}

boot_server() {
  local host_ip=$1
  checkdeps in.tftpd tcpdump python3 &>/dev/null || fatal "tftpd-hpa, tcpdump, and python3 must be installed\n"

  local boot_server_root=$STARTUP/boot-server
  mkdir -p "$boot_server_root"

  local selected_addr addrs=()
  readarray -t -d $'\n' addrs < <(ip --json a | jq -c '.[] | select(.ifname!="lo") | . as $if | .addr_info[] | {"if":$if,"addr":.}')
  if [[ -z $host_ip && ${#addrs[@]} -gt 1 && ! -t 0 ]]; then
    fatal "There is more than one address to bind to and --host-ip is not specified"
  fi
  options=()
  for addr_json in "${addrs[@]}"; do
    options+=("$addr_json" "$(jq -r '"\(.if.ifname): \(.addr.local)"' <<<"$addr_json")")
  done
  selected_addr=$(select_options "Multiple networks found, please select:" "" "${options[@]}") || fatal "No networks found"

  local ifname
  ifname=$(jq -re '.if.ifname' <<<"$selected_addr")
  export HOST_IP TFTP_SERVER_IP
  HOST_IP=$(jq -re '.addr.local' <<<"$selected_addr")
  TFTP_SERVER_IP=$HOST_IP

  BOOT_SERVER_CRT=$STEPPATH/certs/boot-server.crt
  BOOT_SERVER_KEY=$STEPPATH/certs/boot-server.key
  BOOT_SERVER_BUNDLE=$STEPPATH/certs/boot-server.bundle.crt
  if [[ ! -e $BOOT_SERVER_KEY ]] || \
        ! step certificate verify "$BOOT_SERVER_CRT" --roots="$INTERMEDIATE_CRT" &>/dev/null || \
          step certificate needs-renewal "$BOOT_SERVER_CRT" &>/dev/null; then
    step certificate create \
      --ca "$INTERMEDIATE_CRT" --ca-key "$INTERMEDIATE_KEY" \
      --force --no-password --insecure \
      "$HOST_IP" "$BOOT_SERVER_CRT" "$BOOT_SERVER_KEY"
  fi
  step certificate bundle --force "$BOOT_SERVER_CRT" "$INTERMEDIATE_CRT" "$BOOT_SERVER_BUNDLE"

  mkdir -p \
    "$boot_server_root/registry/node-configs" \
    "$boot_server_root/registry/disk-encryption-keys" \
    "$boot_server_root/registry/node-states" \
    "$boot_server_root/registry/images" \
    "$boot_server_root/tftpd/images" \

  trap_prepend "bg_killall" TERM
  trap_prepend "bg_killall" INT
  trap_prepend "bg_killall" EXIT

  python3 -m venv "$boot_server_root/venv"
  "$boot_server_root/venv/bin/pip3" install -qr "$PKGROOT/workloads/node/containers/dhcp-proxy/requirements.txt"
  "$boot_server_root/venv/bin/pip3" install -qr "$PKGROOT/workloads/node/containers/registry/requirements.txt"

  info "Binding to port 67 & 69 and bind-mounting directories require administrator privileges, you might be asked for your sudo password"
  sudo mount --bind "$IMAGES" "$boot_server_root/tftpd/images"
  trap_append "info \"unmounting tftpd bind-mount\"; sudo umount \"$boot_server_root/tftpd/images\"" EXIT
  sudo mount --bind "$IMAGES" "$boot_server_root/registry/images"
  trap_append "info \"unmounting registry bind-mount\"; sudo umount \"$boot_server_root/registry/images\"" EXIT

  BG_MAXPARALLEL=-1 BG_SIGNAL=TERM
  bg_run sudo "$boot_server_root/venv/bin/python3" "$PKGROOT/workloads/node/scripts/dhcp-proxy.py" \
    --boot-map "$PKGROOT/workloads/node/config/boot-map.yaml" "$HOST_IP" "$TFTP_SERVER_IP"
  bg_run sudo in.tftpd \
    --foreground --user tftp --address "$HOST_IP:69" \
    --map-file "$PKGROOT/workloads/node/config/tftpd-map-file" --secure "$boot_server_root/tftpd" --blocksize 1468
  bg_run sudo tcpdump -i "$ifname" -nl port 69 and udp
  PYTHONPATH=$PKGROOT/workloads/node/scripts \
    bg_run "$boot_server_root/venv/bin/gunicorn" \
      -b "$HOST_IP:8020" \
      --certfile "$BOOT_SERVER_BUNDLE" --keyfile "$BOOT_SERVER_KEY" --ssl-version TLSv1_2 \
      "registry:gunicorn(root=\"$boot_server_root/registry\",enable_images=True)"
  info "boot-server is ready"
  bg_block
}

init_certs() {
  verbose "Setting up/checking root and intermediate certificates"
  if [[ ! -e $ROOT_KEY ]] || \
        ! step certificate lint "$ROOT_CRT" &>/dev/null || \
          step certificate needs-renewal "$ROOT_CRT" &>/dev/null; then
    local root_key_arg=("--key" "$ROOT_KEY")
    [[ -e $ROOT_KEY ]] || root_key_arg=("$ROOT_KEY")
    step certificate create --profile root-ca \
      --force --no-password --insecure \
      --not-after 87600h \
      "home-cluster root" "$ROOT_CRT" "${root_key_arg[@]}" &>/dev/null
  fi

  if [[ ! -e $INTERMEDIATE_KEY ]] || \
        ! step certificate verify "$INTERMEDIATE_CRT" --roots="$ROOT_CRT" &>/dev/null || \
          step certificate needs-renewal "$INTERMEDIATE_CRT" &>/dev/null; then
    local intermediate_key_arg=("--key" "$INTERMEDIATE_KEY")
    [[ -e $INTERMEDIATE_KEY ]] || intermediate_key_arg=("$INTERMEDIATE_KEY")
    step certificate create --profile intermediate-ca \
      --force --no-password --insecure \
      --not-after 87600h \
      --ca "$ROOT_CRT" --ca-key "$ROOT_KEY" \
      home-cluster "$INTERMEDIATE_CRT" "${intermediate_key_arg[@]}" &>/dev/null
  fi

  jq -n --arg steppath "$STEPPATH" --arg root_fp "$(step certificate fingerprint "$ROOT_CRT")" --arg root_crt "$ROOT_CRT" '{
      "ca-config": "\($steppath)/config/ca.json",
      "fingerprint": $root_fp,
      "root": $root_crt
  }' >"$STEPPATH/config/defaults.json"
  jq -n --arg root_crt "$ROOT_CRT" --arg intermediate_crt "$INTERMEDIATE_CRT" --arg intermediate_key "$INTERMEDIATE_KEY" '{
    "root": $root_crt,
    "crt": $intermediate_crt,
    "key": $intermediate_key
  }' >"$STEPPATH/config/ca.json"
}

main "$@"
