#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
ssh="ssh -o ControlMaster=auto -o ControlPath=~/.ssh/%r@%h:%p -o ControlPersist=3s"

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="usg - Manage a Unifi Security Gateway setup
Usage:
  usg get (ck|usg)
  usg set ck [CFGGWPATH]
  usg enable-bgp
  usg clear-bgp
  usg forward-dns

Commands:
  get:        Retrieve config.gateway.json from either the Cloud Key or the USG
  set:        Upload stdin to config.gateway.json on the Cloud Key
  enable-bgp: Setup/update BGP in config.gateway.json on the Cloud Key
  clear-bgp:  Remove all BGP config in config.gateway.json on the Cloud Key
"
# docopt parser below, refresh this parser with `docopt.sh usg`
# shellcheck disable=2016,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:450}; usage=${DOC:44:101}; digest=ff71d; shorts=(); longs=()
argcounts=(); node_0(){ value CFGGWPATH a; }; node_1(){ _command get; }
node_2(){ _command ck; }; node_3(){ _command usg; }; node_4(){ _command set; }
node_5(){ _command enable_bgp enable-bgp; }; node_6(){
_command clear_bgp clear-bgp; }; node_7(){ _command forward_dns forward-dns; }
node_8(){ either 2 3; }; node_9(){ required 8; }; node_10(){ required 1 9; }
node_11(){ optional 0; }; node_12(){ required 4 2 11; }; node_13(){ required 5
}; node_14(){ required 6; }; node_15(){ required 7; }; node_16(){
either 10 12 13 14 15; }; node_17(){ required 16; }; cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2; printf "%s\n" "${DOC:44:101}" >&2; exit 1
}'; unset var_CFGGWPATH var_get var_ck var_usg var_set var_enable_bgp \
var_clear_bgp var_forward_dns; parse 17 "$@"; local prefix=${DOCOPT_PREFIX:-''}
unset "${prefix}CFGGWPATH" "${prefix}get" "${prefix}ck" "${prefix}usg" \
"${prefix}set" "${prefix}enable_bgp" "${prefix}clear_bgp" "${prefix}forward_dns"
eval "${prefix}"'CFGGWPATH=${var_CFGGWPATH:-}'
eval "${prefix}"'get=${var_get:-false}'; eval "${prefix}"'ck=${var_ck:-false}'
eval "${prefix}"'usg=${var_usg:-false}'; eval "${prefix}"'set=${var_set:-false}'
eval "${prefix}"'enable_bgp=${var_enable_bgp:-false}'
eval "${prefix}"'clear_bgp=${var_clear_bgp:-false}'
eval "${prefix}"'forward_dns=${var_forward_dns:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}CFGGWPATH" "${prefix}get" "${prefix}ck" "${prefix}usg" \
"${prefix}set" "${prefix}enable_bgp" "${prefix}clear_bgp" "${prefix}forward_dns"
done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' usg`
  eval "$(docopt "$@")"

  # shellcheck disable=2154
  if $get && $ck; then
    get_ck_config
  elif $get && $usg; then
    get_usg_config
  elif $set && $ck; then
    if [[ -n $CFGGWPATH ]]; then
      set_ck_config "$(cat "$CFGGWPATH")"
    else
      set_ck_config "$(cat)"
    fi
  elif $enable_bgp; then
    local config node_ipv4_addrs node_ipv4 node_ipv6_addrs node_ipv6 bgp_asn=64512
    config=$(get_config)
    node_ipv4_addrs=$(kubectl get nodes -ojson | jq -r '.items[].status.addresses[] | select(.type=="InternalIP" and (.address | split(".") | length) == 4) | .address')
    for node_ipv4 in $node_ipv4_addrs; do
      config=$(jq \
        --arg bgp_asn "$bgp_asn" --arg NODE_IPV4 "$node_ipv4" \
        '.protocols.bgp[$bgp_asn].neighbor[$NODE_IPV4] = {"remote-as": $bgp_asn}' <<<"$config")
    done
    node_ipv6_addrs=$(kubectl get nodes -ojson | jq -r '.items[].status.addresses[] | select(.type=="InternalIP" and (.address | split(":") | length) > 2) | .address')
    for node_ipv6 in $node_ipv6_addrs; do
      config=$(jq \
        --arg bgp_asn "$bgp_asn" --arg NODE_IPV6 "$node_ipv6" \
        ".protocols.bgp[\$bgp_asn].neighbor[\$NODE_IPV6] = {\"remote-as\": \$bgp_asn, \"address-family\": {\"ipv6-unicast\": \"''\"}}" <<<"$config")
    done
    set_ck_config "$(jq --indent 2 . <<<"$config")"
  elif $forward_dns; then
    local config
    config=$(get_config)
    config=$(jq \
      --arg dns_svc_ipv6 "$(get_setting cluster.dns.fixedIPv6)" \
      '.service.dns.forwarding.options += ["server=/example.org/$dns_svc_ipv6"]' <<<"$config")
    # set_ck_config "$(jq --indent 2 . <<<"$config")"
  elif $clear_bgp; then
    config=$(jq 'del(.protocols.bgp)' <<<"$config")
  fi
}

get_config() {
  get_ck_config 2>/dev/null || printf "{}\n"
}

get_ck_config() {
  $ssh "$(get_setting unifi.cloudkey_ssh_address)" -- cat "/srv/unifi/data/sites/$(get_setting unifi.unifi_site)/config.gateway.json"
}

get_usg_config() {
  $ssh "$(get_setting unifi.usg_ssh_address)" -- mca-ctrl -t dump-cfg
}

set_ck_config() {
  local config=$1
  $ssh "$(get_setting unifi.cloudkey_ssh_address)" -- mkdir -p "/srv/unifi/data/sites/$(get_setting unifi.unifi_site)"
  $ssh "$(get_setting unifi.cloudkey_ssh_address)" -- tee "/srv/unifi/data/sites/$(get_setting unifi.unifi_site)/config.gateway.json" <<<"$config" >/dev/null
}

main "$@"
