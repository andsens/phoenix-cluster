#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"

  DOC="auth - Manage cluster authentication
Usage:
  auth [options] setup CONFIG

Commands:
setup:
  Requires the kube config generated by the smallstep bootstrapper, which is
  located in smallstep/step-ca-certs/home-cluster.yaml on the workloads share.
  It will:
    * Extract key & cert from the config and place them in \$STEPPATH/certs
    * Create a new kube config in \$HOME/.kube that references those files
    * Add a kube config context that matches home-cluster.yaml
    * Set up smallstep root trust
    * Set up SSH certificate trust
    * Set up admin access to Smallstep
    * Sign any id_*.pub file in \$HOME/.ssh
  Any existing files will be replaced.
"
# docopt parser below, refresh this parser with `docopt.sh auth`
# shellcheck disable=2016,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:660}; usage=${DOC:37:36}; digest=f3b8b; shorts=(); longs=()
argcounts=(); node_0(){ value CONFIG a; }; node_1(){ _command setup; }
node_2(){ optional ; }; node_3(){ optional 2; }; node_4(){ required 3 1 0; }
node_5(){ required 4; }; cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2; printf "%s\n" "${DOC:37:36}" >&2; exit 1
}'; unset var_CONFIG var_setup; parse 5 "$@"; local prefix=${DOCOPT_PREFIX:-''}
unset "${prefix}CONFIG" "${prefix}setup"
eval "${prefix}"'CONFIG=${var_CONFIG:-}'
eval "${prefix}"'setup=${var_setup:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}CONFIG" "${prefix}setup"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' auth`
  eval "$(docopt "$@")"
  confirm_machine_id workstation

  export STEPPATH=${STEPPATH:-$(step path)}
  OLD_KUBECONFIG=$KUBECONFIG

  mkdir -p "$STEPPATH/certs" "$HOME/.kube"
  [[ -r "$CONFIG" ]] || fatal "The file %s does not exist or is not readable" "$SERVER_CA_CERT"
  local user_crt user_key
  user_crt=$(yq -r '.users[] | .user["client-certificate-data"]' "$CONFIG" | base64 -d)
  user_key=$(yq -r '.users[] | .user["client-key-data"]' "$CONFIG" | base64 -d)

  info "Writing client cert & key to %s" "$STEPPATH/certs"
  (
    umask 077
    printf "%s\n" "$user_crt" >"$STEPPATH/certs/home-cluster-admin.crt"
    printf "%s\n" "$user_key" >"$STEPPATH/certs/home-cluster-admin_key"
  )

  info "Setting up kubernetes config"
  if [[ $CONFIG != "$HOME/.kube/home-cluster.yaml" ]]; then
    cp "$CONFIG" "$HOME/.kube/home-cluster.yaml"
  fi
  kubectl config --kubeconfig "$HOME/.kube/home-cluster.yaml" set-credentials admin@home-cluster \
    --client-certificate="$STEPPATH/certs/home-cluster-admin.crt" \
    --client-key="$STEPPATH/certs/home-cluster-admin_key"
  export KUBECONFIG="$HOME/.kube/home-cluster.yaml:$KUBECONFIG"
  kubectl config --kubeconfig "$HOME/.kube/config.yaml" set-context home-cluster \
    --cluster home-cluster --user admin@home-cluster

  info "Bootstrapping Smallstep"
  step ca bootstrap --force --ca-url "pki.$(get_setting cluster.domain):9000" \
    --fingerprint "$(step certificate fingerprint <(\
      kubectl --context home-cluster -n smallstep get secret smallstep-root -o=jsonpath='{.data.tls\.crt}' | base64 -d))"

  info "Trusting SSH host keys signed by Smallstep"
  local known_hosts=$HOME/.ssh/known_hosts expected_known_hosts_line current_known_hosts_line
  expected_known_hosts_line="@cert-authority *.local $(step ssh config --host --roots)"
  if [[ -e "$known_hosts" ]] && current_known_hosts_line=$(grep '^@cert-authority \*.local ' "$known_hosts"); then
    if [[ $current_known_hosts_line != "$expected_known_hosts_line" ]]; then
      warning "Replacing '@cert-authority *.local' line in %s, it does not match the current key" "$known_hosts"
      local all_other_lines
      all_other_lines=$(grep -v '^@cert-authority \*.local ' "$known_hosts")
      printf "%s\n%s\n" "$all_other_lines" "$expected_known_hosts_line" >"$known_hosts"
    else
      info "The '@cert-authority *.local' line in %s exists and is correct" "$known_hosts"
    fi
  else
    info "Appending '@cert-authority *.local ...' to %s" "$known_hosts"
    printf "@cert-authority *.local %s\n" "$expected_known_hosts_line" >>"$known_hosts"
  fi

  info "Configuring admin access to Smallstep"
  jq --arg path "$STEPPATH/certs/home-cluster-admin.crt" '.["x5c-cert"] = $path' <"$STEPPATH/config/defaults.json" | sponge "$STEPPATH/config/defaults.json"
  jq --arg path "$STEPPATH/certs/home-cluster-admin_key" '.["x5c-key"] = $path' <"$STEPPATH/config/defaults.json" | sponge "$STEPPATH/config/defaults.json"

  info "Signing all pubkeys in %s" "$HOME/.ssh"
  local pubkey principal
  principal=$(get_setting "admin.username")
  for pubkey in "$HOME/.ssh"/id_*.pub; do
    [[ $pubkey != *-cert.pub ]] || continue
    step ssh certificate --force --sign "$principal" "$pubkey"
  done

  if [[ $OLD_KUBECONFIG != *"$HOME/.kube/home-cluster.yaml"* ]]; then
    warning "Remember to add the new client config to your \$KUBECONFIG with KUBECONFIG=\$KUBECONFIG:\$HOME/.kube/home-cluster.yaml"
  fi
}

main "$@"
