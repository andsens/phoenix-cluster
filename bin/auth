#!/usr/bin/env bash
# shellcheck source-path=../
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/lib/common.sh"
  source "$PKGROOT/lib/auth.sh"

  DOC="auth - Manage cluster authentication
Usage:
  auth setup CONFIG
  auth renew

Commands:
setup:
  Requires the kube config generated by the smallstep bootstrapper, which is
  located in smallstep/step-ca-certs/home-cluster.yaml on the workloads share.
  It will configure this workstation to:
    * Create a new kube config in \$HOME/.kube
    * Bootstrap the smallstep client to trust the cluster PKI
    * Bootstrap the smallstep client to trust the kube-apiserver client ca
    * Log docker in to the cluster CR
    * Trust SSH host certificates
    * Create SSH client certificates for any id_*.pub file in \$HOME/.ssh
  Existing files will be replaced.

renew:
  Renew the kube-apiserver client certificate
"
# docopt parser below, refresh this parser with `docopt.sh auth`
# shellcheck disable=2016,1090,1091,2034
docopt() { source "$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh" '1.0.0' || {
ret=$?; printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e
trimmed_doc=${DOC:0:708}; usage=${DOC:37:39}; digest=9b984; shorts=(); longs=()
argcounts=(); node_0(){ value CONFIG a; }; node_1(){ _command setup; }
node_2(){ _command renew; }; node_3(){ required 1 0; }; node_4(){ required 2; }
node_5(){ either 3 4; }; node_6(){ required 5; }; cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2; printf "%s\n" "${DOC:37:39}" >&2; exit 1
}'; unset var_CONFIG var_setup var_renew; parse 6 "$@"
local prefix=${DOCOPT_PREFIX:-''}; unset "${prefix}CONFIG" "${prefix}setup" \
"${prefix}renew"; eval "${prefix}"'CONFIG=${var_CONFIG:-}'
eval "${prefix}"'setup=${var_setup:-false}'
eval "${prefix}"'renew=${var_renew:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}CONFIG" "${prefix}setup" "${prefix}renew"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/andsens/docopt.sh/docopt-lib.sh"' auth`
  eval "$(docopt "$@")"
  confirm_machine_id workstation

  # shellcheck disable=2154
  if $setup; then
    export STEPPATH=${STEPPATH:-$(step path --base)}
    OLD_KUBECONFIG=$KUBECONFIG
    [[ -r "$CONFIG" ]] || fatal "The file %s does not exist or is not readable" "$CONFIG"

    extract_kube_config_to_smallstep "$STEP_KUBE_API_CONTEXT" "$CONFIG"
    setup_kube_config "$STEP_KUBE_API_CONTEXT" "$KUBE_CONTEXT" "$KUBE_CLUSTER"
    setup_smallstep_context "$STEP_PKI_CONTEXT" "$KUBE_CONTEXT" "pki.$(get_setting cluster.domain):9000" smallstep smallstep-root
    setup_smallstep_context "$STEP_KUBE_API_CONTEXT" "$KUBE_CONTEXT" "pki-kube.$(get_setting cluster.domain):9001" smallstep kube-apiserver-client-ca
    setup_docker_cred_helper "cr.$(get_setting cluster.domain)" "$DOCKER_CRED_HELPER" "$HOME/.docker/config.json"
    setup_ssh_host_cert_trust "$STEP_PKI_CONTEXT" "*.local" "$HOME/.ssh/known_hosts"
    sign_ssh_client_keys "$STEP_PKI_CONTEXT" "$(get_setting "admin.username")"

    if [[ $CONFIG != "$HOME/.kube/home-cluster.yaml" ]]; then
      info "Removing %s" "$CONFIG"
      rm "$CONFIG"
    fi
    if [[ $OLD_KUBECONFIG != *"$HOME/.kube/home-cluster.yaml"* ]]; then
      warning "Remember to add the new client config to your \$KUBECONFIG with KUBECONFIG=\$KUBECONFIG:\$HOME/.kube/home-cluster.yaml"
    fi
  elif $renew; then
    step ca renew --force --context home-cluster-kube-api "$(get_kube_crt_path)" "$(get_kube_key_path)"
  fi
}

main "$@"
