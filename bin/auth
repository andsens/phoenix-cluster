#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"

KUBE_CFG_DEFAULT_PATH=$HOME/.kube/config.yaml
CONFIG_DIR=$HOME/.config/phxc

main() {
  local e; for e; do [[ "$e" != "--help" ]] || usage; done
  [[ $# -gt 0 ]] || usage
  local cmd=$1
  shift
  case "$cmd" in
    configure) configure "$@" ;;
    get-cert) get_cert "$@" ;;
    *) usage ;;
  esac
}

configure() {
  [[ $# -eq 2 ]] || usage
  mkdir -p "$CONFIG_DIR"
  local keyname=$1 kube_api_hostname=$2 kube_api_addr ca_url api_server_cert api_client_cert_fp yesno
  local kube_cfg_path=$HOME/.kube/phxc.yaml kube_context=phxc kube_cluster=phxc username=system:admin
  [[ ! $kube_api_hostname =~ ^(https?://)?([^:]+) ]] || kube_api_hostname=${BASH_REMATCH[2]}
  kube_api_addr="https://$kube_api_hostname:6443"
  ca_url=${kube_api_addr%:*}:9001
  # TOFU for both the api server & client certs
  api_server_cert=$(step certificate inspect --insecure --format pem "$kube_api_addr/roots.pem")
  api_client_cert_fp=$(step certificate fingerprint <(step certificate inspect --insecure --format pem "$ca_url"))
  warning "The Kubernetes API server and client CA certificate fingerprints are:"
  printf "Server:    %s\n" "$(step certificate fingerprint <(printf "%s\n" "$api_server_cert"))" >&2
  printf "Client CA: %s\n" "$api_client_cert_fp" >&2
  printf "Do you want to establish trust with these certificates? [y/N]"
  read -r yesno
  [[ $yesno =~ ^[Yy](es)?$ ]] || fatal "User aborted operation"
  kubectl config --kubeconfig "$kube_cfg_path" set-cluster "$kube_cluster" \
    --server="$kube_api_addr" \
    --embed-certs \
    --certificate-authority=<(printf "%s" "$api_server_cert")
  kubectl config --kubeconfig "$kube_cfg_path" set-credentials "$username@$kube_cluster" \
    --exec-api-version="client.authentication.k8s.io/v1beta1" \
    --exec-command="$(realpath "${BASH_SOURCE[0]}")" \
    --exec-arg="get-cert" \
    --exec-arg="$keyname" \
    --exec-arg="$api_client_cert_fp" \
    --exec-arg="$kube_cfg_path" \
    --exec-arg="$kube_cluster" \
    --exec-arg="$username"
  kubectl config --kubeconfig "$KUBE_CFG_DEFAULT_PATH" set-context $kube_context \
    --cluster "$kube_cluster" --user "$username@$kube_cluster"
  rm -f "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key"
}

get_cert() {
  [[ $# -eq 5 ]] || usage
  local keyname=$1 ca_fp=$2 kube_cfg_path=$3 cluster=$4 username=$5
  if [[ ! -e $CONFIG_DIR/$username.crt ]] || \
      step certificate needs-renewal --expires-in 0s "$CONFIG_DIR/$username.crt" 2>&1 | LOGPROGRAM=step pipe_verbose; then
    local kube_config kube_api_addr ca_url ca_cert remote_ca_fp ssh_pem header payload signature
    kube_config=$(kubectl config view --raw --kubeconfig "$kube_cfg_path" -o json | \
      jq --arg cluster "$cluster" '.clusters[] | select(.name == $cluster) | .cluster')
    kube_api_addr=$(jq -re '.server' <<<"$kube_config")
    ca_url=${kube_api_addr%:*}:9001
    ca_cert=$(step certificate inspect --insecure --format pem "$ca_url/roots.pem")
    remote_ca_fp=$(step certificate fingerprint <(printf "%s\n" "$ca_cert"))
    [[ $ca_fp = "$remote_ca_fp" ]] || \
      fatal "The fingerprint of %s does not match the one embedded in the kube config (%s vs. %s)" \
        "$ca_url" "$remote_ca_fp" "$ca_fp"
    ssh_pem=$(step-kms-plugin key "sshagentkms:$keyname")
    header=$(step crypto jwk create --force --use sig --from-pem=<(printf "%s\n" "$ssh_pem") \
      /dev/stdout /dev/null 2>/dev/null | jq '{
      "alg": .alg,
      "kid": .kid,
      "typ": "JWT"
    }' | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    payload=$(jq -n --arg ca_url "$ca_url" --argjson now "$(date +%s)" \
                    --arg jti "$(openssl rand -hex 32)" --arg sub "$username" '{
      "aud": ($ca_url + "/1.0/sign"),
      "exp": ($now + 30),
      "iat": $now,
      "iss": "admin",
      "jti": $jti,
      "nbf": ($now - 30),
      "sans": [$sub],
      "sub": $sub
    }' | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    signature=$(step kms sign --format jws --in <(printf "%s.%s" "$header" "$payload") \
      --kms "sshagentkms" "sshagentkms:$keyname")
    step ca certificate --ca-url="$ca_url" --root=<(printf "%s\n" "$ca_cert") --token="$header.$payload.$signature" --force \
      "$username" "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key" 2>&1 | LOGPROGRAM=step pipe_verbose
  fi
  local cert key
  cert=$(cat "$CONFIG_DIR/$username.crt")
  key=$(cat "$CONFIG_DIR/$username.key")
  printf '{
  "apiVersion": "client.authentication.k8s.io/v1beta1",
  "kind": "ExecCredential",
  "status": {
    "clientCertificateData": "%s",
    "clientKeyData": "%s"
  }
}
' "${cert//$'\n'/'\n'}" "${key//$'\n'/'\n'}"
}

usage() {
  printf "Usage:
  auth configure <ssh-key-name> <kube-api-hostname>
  auth get-cert <ssh-key-name> <kube-api-client-ca-fp> <kube-cfg-path> <cluster> <username>
" >&2
  return 1
}

main "$@"
