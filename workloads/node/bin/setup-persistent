#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"

  DOC="setup-persistent - Setup the persistent disk
Usage:
  setup-persistent
"
# docopt parser below, refresh this parser with `docopt.sh setup-persistent`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:70};usage=${DOC:45:25}
digest=a2214;options=();node_0(){ return 0;};cat <<<' docopt_exit() { [[ -n $1 \
]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:45:25}" >&2;exit 1;}';local \
varnames=() varname;for varname in "${varnames[@]}"; do unset "var_$varname"
done;parse 0 "$@";return 0;local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval ;local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' setup-persistent`
  eval "$(docopt "$@")"

  local data_devpath
  data_devpath=$(jq -re '.data.devPath' /run/initramfs/node-settings.json)
  [[ $data_devpath != "$(jq -re .esp_device /run/initramfs/boot-state.json 2>/dev/null)" ]] || \
    fatal "Potential mis-configuration: The ESP device path and the data device path are the same (%s)" "$data_devpath"

  if [[ -e /var/lib/persistent ]]; then
    warning "/var/lib/persistent already exists, assuming persistent disk is already set up, aborting..."
    exit 0
  fi
  mkdir /var/lib/persistent
  if jq -re '.data.encrypted==true' /run/initramfs/node-settings.json >/dev/null; then
    [[ -e /run/initramfs/cluster-secrets.json ]] || fatal "/run/initramfs/cluster-secrets.json does not exist"

    local disk_encryption_key
    disk_encryption_key=$(jq -j '.["disk-encryption-key"]' /run/initramfs/cluster-secrets.json)
    if ! cryptsetup isLuks "$data_devpath" 2>/dev/null; then
      info "%s not initialized, formatting" "$data_devpath"
      cryptsetup luksFormat --batch-mode "$data_devpath" <(printf "%s" "$disk_encryption_key")
      cryptsetup open --type luks2 --key-file <(printf "%s" "$disk_encryption_key") "$data_devpath" persistent
      mkfs.ext4 /dev/mapper/persistent
    else
      cryptsetup open --type luks2 --key-file <(printf "%s" "$disk_encryption_key") "$data_devpath" persistent
    fi
    mount /dev/mapper/persistent /var/lib/persistent
  else
    if lsblk --json --output FSTYPE "$data_devpath" | jq -re '.blockdevices[0].fstype == null' >/dev/null; then
      info "%s not initialized, formatting" "$data_devpath"
      mkfs.ext4 "$data_devpath"
    fi
    mount "$data_devpath" /var/lib/persistent
  fi
  mkdir -p /var/lib/persistent/containerd /var/lib/persistent/longhorn /var/lib/persistent/node-password
}

main "$@"
