#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/node.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/curl-boot-server.sh"

  DOC="update-boot - Update the boot partition with the latest image
Usage:
  update-boot
"
# docopt parser below, refresh this parser with `docopt.sh update-boot`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:82};usage=${DOC:62:20}
digest=52055;options=();node_0(){ return 0;};cat <<<' docopt_exit() { [[ -n $1 \
]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:62:20}" >&2;exit 1;}';local \
varnames=() varname;for varname in "${varnames[@]}"; do unset "var_$varname"
done;parse 0 "$@";return 0;local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval ;local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' update-boot`
  eval "$(docopt "$@")"

  trap_append clear_boot_tmp EXIT

  local boot_server
  VARIANT=$(get_node_state variant)
  if ! boot_server=$(get_node_state boot-server); then
    fatal "Unable to retrieve boot-server from node-state.json"
  fi
  mkdir -p /boot/home-cluster
  if ! curl_boot_server -o/boot/home-cluster/digests.json.new "https://${boot_server}:8020/images/$VARIANT/digests.json"; then
    fatal "Unable to retrieve image digests from boot server"
  fi
  local current_root_img_sha256 new_root_img_sha256
  current_root_img_sha256=$(jq -re '.sha256sums["root.img"]' /boot/home-cluster/digests.json 2>/dev/null || true)
  new_root_img_sha256=$(jq -re '.sha256sums["root.img"]' /boot/home-cluster/digests.json.new)
  if [[ $current_root_img_sha256 = "$new_root_img_sha256" ]]; then
    info "boot partition is up-to-date"
    return 0
  fi
  info "boot partition is outdated, updating now"
  curl_boot_server -o"/boot/home-cluster/root.$new_root_img_sha256.img" "https://${boot_server}:8020/images/$VARIANT/root.$new_root_img_sha256.img"
  if [[ $VARIANT = rpi* ]]; then
    curl_boot_server -o/boot/boot.img.new "https://${boot_server}:8020/images/$VARIANT/boot.img"
    mv /boot/boot.img.new /boot/boot.img
  else
    local efisuffix
    case $VARIANT in
      amd64) efisuffix=X64 ;;
      arm64) efisuffix=AA64 ;;
      *) fatal "Unknown variant: %s" "$VARIANT" ;;
    esac
    mkdir -p /boot/EFI/BOOT
    curl_boot_server -o/boot/EFI/BOOT/BOOT${efisuffix}.EFI.new "https://${boot_server}:8020/images/$VARIANT/uki.efi"
    mv /boot/EFI/BOOT/BOOT${efisuffix}.EFI.new /boot/EFI/BOOT/BOOT${efisuffix}.EFI
  fi
  local rootimg
  for rootimg in /boot/home-cluster/root.*.img; do
    [[ $rootimg = "/boot/home-cluster/root.$new_root_img_sha256.img" ]] || rm "$rootimg"
  done
}

main "$@"
