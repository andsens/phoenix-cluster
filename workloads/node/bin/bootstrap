#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")
export DOCKER_CLI_HINTS=false

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/bgpid/bgpid.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  # shellcheck source=workloads/settings/env/settings.shellcheck.sh
  source "$PKGROOT/workloads/settings/env/settings.sh"
  eval_settings

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap VARIANT

Supported variants:
  amd64 - Standard x86_64 image
  arm64 - ARM 64-bit image
  rpi5 - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:199};usage=${DOC:29:26}
digest=9d04c;options=();node_0(){ value VARIANT a;};cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:29:26}" >&2;exit 1;}'
local varnames=(VARIANT) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 0 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval $p'VARIANT=${var_VARIANT:-};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  local DOCKER_PLATFORM ARCH
  case $VARIANT in
    amd64)
    DOCKER_PLATFORM=linux/amd64
    ARCH=amd64
    ;;
    arm64|rpi*)
    DOCKER_PLATFORM=linux/arm64
    ARCH=arm64
    ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac

  local bundle
  bundle=$(mktemp --suffix .tar.gz)
  trap_append "rm \"$bundle\"" EXIT
  "$PKGROOT/workloads/node/bin/bundle" "$bundle"

  # shellcheck disable=SC2154
  rm -rf "$PKGROOT/images/$VARIANT.new"
  mkdir "$PKGROOT/images/$VARIANT.new"

  if [[ ! -e "$PKGROOT/images/containers/create-boot-image-$ARCH.tar" ]] || \
     find "$PKGROOT/workloads/node/containers/create-boot-image" "$PKGROOT/workloads/common-context" \
       -newer "$PKGROOT/images/containers/create-boot-image-$ARCH.tar" 2>/dev/null | grep -q .; then
    info "Building '%s'" "create-boot-image:$ARCH"
    mkdir -p "$PKGROOT/images/containers"
    docker run --rm -ti \
      --platform "$DOCKER_PLATFORM" \
      -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
      -v "$PKGROOT/workloads/node/containers/create-boot-image:/workspace/context:ro" \
      -v "$PKGROOT/images:/workspace/images:rw" \
      gcr.io/kaniko-project/executor:latest \
      --dockerfile context/Dockerfile \
      --build-arg "ARCH=$ARCH" \
      --custom-platform="$DOCKER_PLATFORM" \
      --destination "cluster.local/create-boot-image:$ARCH" \
      --tar-path "/workspace/images/containers/create-boot-image-$ARCH.tar" \
      --no-push
    docker load -i "$PKGROOT/images/containers/create-boot-image-$ARCH.tar"
  else
    info "Not building '%s', no files have changed since last run" "create-boot-image:$ARCH"
  fi

  info "Building '%s'" "node:$VARIANT"
  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    -v "$PKGROOT/workloads/node/bootstrap/Dockerfile:/workspace/context/Dockerfile:ro" \
    -v "$bundle:/workspace/home-cluster.tar.gz:ro" \
    -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
    -v "$PKGROOT/images:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --dockerfile context/Dockerfile \
    --build-arg "VARIANT=$VARIANT" \
    --custom-platform="$DOCKER_PLATFORM" \
    --destination "cluster.local/node:$VARIANT" \
    --insecure-registry=cluster.local \
    --tar-path "/workspace/images/$VARIANT.new/node.tar" \
    --no-push

  local node_settings_tmp node mac
  node_settings_tmp=$(mktemp -d)
  trap_append "rm -rf \"$node_settings_tmp\"" EXIT
  for node in $(yq -c '.nodes[]' "$PKGROOT/settings.yaml"); do
    ! mac=$(yq -re '.mac' <<<"$node") || \
      printf "%s\n" "$node" > "$node_settings_tmp/${mac//:/-}.json"
  done
  docker run --rm -ti \
    --platform "$DOCKER_PLATFORM" \
    -v "$node_settings_tmp:/node-settings:ro" \
    -v "$PKGROOT/workloads/node/bootstrap/create-boot-image-assets:/assets:ro" \
    -v "$PKGROOT/workloads/node/bootstrap/scripts:/scripts:ro" \
    -v "$PKGROOT/images:/images:rw" \
    -e "VARIANT=$VARIANT" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    -e CHOWN=$UID:$UID \
    "cluster.local/create-boot-image:$ARCH"
}

main "$@"
