#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")
export DOCKER_CLI_HINTS=false

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  # shellcheck source=workloads/settings/env/settings.shellcheck.sh
  source "$PKGROOT/workloads/settings/env/settings.sh"
  eval_settings

  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap [-a ARCH]

Options:
  -a --arch ARCH  Processor architecture of the image [default: amd64]
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:138};usage=${DOC:29:28}
digest=00c86;options=('-a --arch 1');node_0(){ value __arch 0;};node_1(){
optional 0;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:29:28}" >&2;exit 1;}';local varnames=(__arch) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 1 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__arch=${var___arch:-amd64};';local docopt_i=1;[[ $BASH_VERSION \
=~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  local guest_qemu_arch
  # shellcheck disable=SC2154
  case $__arch in
    amd64) guest_qemu_arch=x86_64 ;;
    arm64) guest_qemu_arch=aarch64 ;;
    default) fatal "Unknown processor architecture: %s" "$__arch" ;;
  esac

  local host_qemu_arch
  case $(uname -m) in
    x86_64) host_qemu_arch=amd64 ;;
    aarch64) host_qemu_arch=aarch64 ;;
    default) fatal "Unknown host processor architecture: %s" "$(uname -m)" ;;
  esac

  local bundle
  bundle=$(mktemp --suffix .tar.gz)
  # shellcheck disable=SC2064
  trap "rm \"$bundle\"" EXIT
  "$PKGROOT/workloads/node/bin/bundle" "$bundle"

  mkdir -p "$PKGROOT/images/$__arch"

  if [[ ! -e "$PKGROOT/images/$__arch/create-boot-image.tar" ]] || \
     find "$PKGROOT/workloads/node/containers/create-boot-image" "$PKGROOT/workloads/common-context" \
       -newer "$PKGROOT/images/$__arch/create-boot-image.tar" 2>/dev/null | grep -q .; then
    info "Building '%s'" "create-boot-image:$__arch"
    docker run --rm -ti \
      -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
      -v "$PKGROOT/workloads/node/containers/create-boot-image:/workspace/context:ro" \
      -v "$PKGROOT/images:/workspace/images:rw" \
      gcr.io/kaniko-project/executor:latest \
      --dockerfile context/Dockerfile \
      --build-arg "ARCH=$__arch" \
      --custom-platform="linux/$__arch" \
      --destination "cluster.local/create-boot-image:$__arch" \
      --tar-path "/workspace/images/$__arch/create-boot-image.new.tar" \
      --no-push
    docker load -i "$PKGROOT/images/$__arch/create-boot-image.new.tar"
  else
    info "Not building '%s', no files have changed since last run" "create-boot-image"
    cp "$PKGROOT/images/$__arch/create-boot-image.tar" "$PKGROOT/images/$__arch/create-boot-image.new.tar"
  fi

  if [[ $host_qemu_arch != "$__arch" ]]; then
    local guest_qemu_major_version host_qemu_major_version
    guest_qemu_major_version=$(
      docker run --rm -ti --entrypoint "/usr/bin/qemu-system-${guest_qemu_arch}" "cluster.local/create-boot-image:$__arch" --version | \
      head -n1 | sed 's/QEMU emulator version \([0-9]\+\).*/\1/'
    )
    [[ -c /dev/kvm ]] || \
      fatal "%s is not installed on the host system, please install it with major version %s" "$guest_qemu_major_version"
    host_qemu_major_version=$("qemu-system-${host_qemu_arch}" --version | head -n1 | sed 's/QEMU emulator version \([0-9]\+\).*/\1/')
    [[ $host_qemu_major_version = "$guest_qemu_major_version" ]] || \
      fatal "QEMU version mismatch! The QEMU major version of the host system is %s while the image to create the node image uses version %s." \
        "$host_qemu_major_version" "$guest_qemu_major_version"
  fi

  info "Building '%s'" "node:$__arch"
  docker run --rm -ti \
    -v "$PKGROOT/workloads/node/bootstrap/Dockerfile:/workspace/context/Dockerfile:ro" \
    -v "$bundle:/workspace/home-cluster.tar.gz:ro" \
    -v "$PKGROOT/workloads/common-context:/workspace/common-context:ro" \
    -v "$PKGROOT/images:/workspace/images:rw" \
    gcr.io/kaniko-project/executor:latest \
    --dockerfile context/Dockerfile \
    --build-arg "ARCH=$__arch" \
    --custom-platform="linux/$__arch" \
    --destination "cluster.local/node:$__arch" \
    --insecure-registry=cluster.local \
    --tar-path "/workspace/images/$__arch/node.new.tar" \
    --no-push

  local node_settings
  node_settings=$(mktemp -d)
  for node in $(yq -c '.nodes[]' "$PKGROOT/settings.yaml"); do
    ! mac=$(yq -re '.mac' <<<"$node")|| \
      printf "%s\n" "$node" >"$node_settings/$mac.json"
  done
  docker run --rm -ti \
    -v "$node_settings:/node-settings:ro" \
    -v "$PKGROOT/workloads/node/bootstrap/create-boot-image-assets:/assets:ro" \
    -v "$PKGROOT/workloads/node/bootstrap/scripts:/scripts:ro" \
    -v "$PKGROOT/images:/images:rw" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    -e CHOWN=$UID:$UID \
    "cluster.local/create-boot-image:$__arch"
  mv "$PKGROOT/images/$__arch.old/create-boot-image.new.tar" "$PKGROOT/images/$__arch/create-boot-image.tar"
}

main "$@"
