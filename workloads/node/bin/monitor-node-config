#!/usr/bin/env bash
# shellcheck source-path=../../..

set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")
export LC_ALL=C

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/node-state.sh"
  DOC="monitor-node-config - Monitor the node configuration and reboot if it changes
Usage:
  monitor-node-config [-p S]

Options:
  -p --pollrate=S      Poll every S seconds [default: 15]
"
# docopt parser below, refresh this parser with `docopt.sh monitor-node-config`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:181};usage=${DOC:78:35}
digest=90f2d;options=('-p --pollrate 1');node_0(){ value __pollrate 0;}
node_1(){ optional 0;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" \
"$1" >&2;printf "%s\n" "${DOC:78:35}" >&2;exit 1;}';local \
varnames=(__pollrate) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 1 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval $p'__pollrate=${var___pollra'\
'te:-15};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' monitor-node-config`
  eval "$(docopt "$@")"

  local config_path=/run/initramfs/node-config.json boot_server primary_mac config_src_addr config

  boot_server=$(get_node_state boot-server) || fatal "Unable to download node configuration: boot-server not present in node-state.json"
  primary_mac=$(get_node_state primary-mac) || fatal "Unable to download node configuration: primary-mac not present in node-state.json"
  config_src_addr=https://${boot_server}:8020/node-config/${primary_mac//:/-}.json
  while true; do
    if config=$(curl --cacert /usr/local/share/ca-certificates/home-cluster-root.crt -fsL --connect-timeout 5 --retry 3 "$config_src_addr"); then
      if [[ ! -e $config_path ]] || ! diff $config_path <(printf "%s\n" "$config") &>/dev/null; then
        # Update the node-config on the boot partition
        ! mountpoint -q /boot || printf "%s\n" "$config" > "/boot/node-config.json"
        info "The node configuration has changed, rebooting"
        exec systemctl reboot
      fi
    else
      # shellcheck disable=SC2154
      warning "Downloading the node configuration failed, retrying in %d seconds" "$__pollrate"
    fi
    # shellcheck disable=SC2086
    sleep $__pollrate
  done
}

main "$@"
