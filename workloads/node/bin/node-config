#!/usr/bin/env bash
# shellcheck source-path=../../..

set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")
export LC_ALL=C

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/node.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/curl-boot-server.sh"
  DOC="download-node-config - Download the node configuration and reboot if it changes
Usage:
  download-node-config [--reboot|--boot]

Options:
  --reboot  Reboot if the downloaded node-config changes
  --boot    Copy the config from the boot partition if downloading fails
"
# docopt parser below, refresh this parser with `docopt.sh download-node-config`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:267};usage=${DOC:80:47}
digest=8bbea;options=(' --reboot 0' ' --boot 0');node_0(){ switch __reboot 0;}
node_1(){ switch __boot 1;};node_2(){ choice 0 1;};node_3(){ optional 2;};cat \
<<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:80:47}" >&2;exit 1;}';local varnames=(__reboot __boot) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 3 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__reboot=${var___reboot:-false};'$p'__boot=${var___boot:-false};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' download-node-config`
  eval "$(docopt "$@")"

  local \
    encrypted_node_config_path=/boot/node-config.enc.json \
    node_key_path=/boot/home-cluster/node-key \
    encrypted_node_config node_config \
    boot_server primary_mac config_src_addr \
    ret=0
  boot_server=$(get_node_state boot-server) || fatal "Unable to download node configuration: boot-server not present in node-state.json"
  primary_mac=$(get_node_state primary-mac) || fatal "Unable to download node configuration: primary-mac not present in node-state.json"
  config_src_addr=https://${boot_server}:8020/registry/node-config/${primary_mac//:/-}.json
  info "Downloading node-config from %s" "$config_src_addr"
  if encrypted_node_config=$(curl_boot_server "$config_src_addr"); then
    # shellcheck disable=SC2064
    trap "rm -f $NODE_CONFIG_PATH.tmp" EXIT
    if decrypt_node_config "$node_key_path" "$encrypted_node_config" >$NODE_CONFIG_PATH.tmp; then
      if [[ ! -e $NODE_CONFIG_PATH ]] || ! diff $NODE_CONFIG_PATH $NODE_CONFIG_PATH.tmp &>/dev/null; then
        mv $NODE_CONFIG_PATH.tmp $NODE_CONFIG_PATH
        # Update the node-config on the boot partition
        ! mountpoint -q /boot || printf "%s\n" "$encrypted_node_config" > $encrypted_node_config_path
        # shellcheck disable=SC2154
        if $__reboot; then
          info "The node configuration has changed, rebooting"
          exec systemctl reboot
        fi
      fi
    else
      ret=1
      error "Failed to decrypt downloaded node-config"
    fi
  else
    ret=1
    error "Downloading the node configuration failed"
  fi
  # shellcheck disable=SC2154
  if [[ ! -e $NODE_CONFIG_PATH ]] && $__boot; then
    # shellcheck disable=SC2064
    trap "rm -f $NODE_CONFIG_PATH.tmp" EXIT
    if [[ -e $encrypted_node_config_path ]]; then
      info "Decrypting node-config from %s" "$encrypted_node_config_path"
      if decrypt_node_config "$node_key_path" "$(cat "$encrypted_node_config_path")" > "$NODE_CONFIG_PATH.tmp" 2>/dev/null; then
        ret=0
        mv "$NODE_CONFIG_PATH.tmp" "$NODE_CONFIG_PATH"
      else
        warning "Failed to decrypt node-config on boot partition"
      fi
    fi
  fi
  if [[ -e $NODE_CONFIG_PATH ]]; then
    (umask 0077 get_node_config disk.encryption-key | base64 -d >/run/initramfs/disk-encryption-key)
  fi
  return $ret
}

decrypt_node_config() {
  local \
    node_key_path=$1 node_config_response=$2 \
    cipher encrypted_config calculated_hmac node_config

  cipher=$(
    jq -r '.["encrypted-chipher"]' <<<"$node_config_response" | \
    base64 -d | \
    openssl pkeyutl -pkeyopt rsa_padding_mode:oaep -inkey "$node_key_path" -decrypt | \
    base64 -w0
  )

  encrypted_config=$(jq -r '.["encrypted-config"]' <<<"$node_config_response")
  calculated_hmac=$(
    base64 -d <<<"$encrypted_config" | \
    openssl dgst -sha256 -binary -mac hmac -macopt hexkey:"$(base64 -d  <<<"$cipher" | tail -c +49 | xxd -p -c0)" | \
    base64 -w0
  )
  [[ $calculated_hmac = "$(jq -r '.["encrypted-config-hmac"]' <<<"$node_config_response")" ]] || \
    fatal "Calculated hmac does not match the hmac sent by the server"

  node_config=$(
    base64 -d <<<"$encrypted_config" |  openssl enc -d -aes-256-cbc \
      -iv "$(base64 -d  <<<"$cipher" | tail -c +33 | head -c 16 | xxd -p -c128)" \
      -K "$(base64 -d  <<<"$cipher" | head -c 32 | xxd -p -c128)"
  )
  set +x
  printf "%s" "$node_config"
}

main "$@"
