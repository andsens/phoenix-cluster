#!/usr/bin/env bash
# shellcheck source-path=../../..

set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")
export LC_ALL=C

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/trap.sh/trap.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/node.sh"
  source "$PKGROOT/workloads/node/bootstrap/assets/etc/initramfs-tools/scripts/curl-boot-server.sh"
  DOC="download-node-config - Download the node configuration and reboot if it changes
Usage:
  download-node-config
"
# docopt parser below, refresh this parser with `docopt.sh download-node-config`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:109};usage=${DOC:80:29}
digest=fb663;options=();node_0(){ return 0;};cat <<<' docopt_exit() { [[ -n $1 \
]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:80:29}" >&2;exit 1;}';local \
varnames=() varname;for varname in "${varnames[@]}"; do unset "var_$varname"
done;parse 0 "$@";return 0;local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval ;local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' download-node-config`
  eval "$(docopt "$@")"

  local \
    encrypted_node_config_path=/boot/node-config.enc.json \
    node_key_path=/boot/home-cluster/node-key \
    encrypted_node_config node_config

  if encrypted_node_config=$(download_node_config); then
    # shellcheck disable=SC2064
    trap "rm -f $NODE_CONFIG_PATH.tmp" EXIT
    if decrypt_node_config "$node_key_path" "$encrypted_node_config" >$NODE_CONFIG_PATH.tmp; then
      if [[ ! -e $NODE_CONFIG_PATH ]] || ! diff $NODE_CONFIG_PATH $NODE_CONFIG_PATH.tmp &>/dev/null; then
        mv $NODE_CONFIG_PATH.tmp $NODE_CONFIG_PATH
        # Update the node-config on the boot partition
        ! mountpoint -q /boot || printf "%s\n" "$encrypted_node_config" > $encrypted_node_config_path
        info "The node configuration has changed, rebooting"
        exec systemctl reboot
      fi
    else
      fatal "Failed to decrypt downloaded node-config"
    fi
  else
    # shellcheck disable=SC2154
    fatal "Downloading the node configuration failed"
  fi
}

main "$@"
