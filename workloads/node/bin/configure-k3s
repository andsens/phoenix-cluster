#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"

  DOC="configure-k3s - Set k3s node-label & token
Usage:
  configure-k3s
"
# docopt parser below, refresh this parser with `docopt.sh configure-k3s`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:65};usage=${DOC:43:22}
digest=065f4;options=();node_0(){ return 0;};cat <<<' docopt_exit() { [[ -n $1 \
]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:43:22}" >&2;exit 1;}';local \
varnames=() varname;for varname in "${varnames[@]}"; do unset "var_$varname"
done;parse 0 "$@";return 0;local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval ;local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' configure-k3s`
  eval "$(docopt "$@")"

  mkdir -p /etc/rancher/k3s/config.yaml.d

  local label label_config="node-label: []" k3s_type=agent
  for label in $(jq -r '(.["node-label"] // [])[]' /run/initramfs/node-config.json); do
    if [[ $label = 'node-role.kubernetes.io/control-plane=true' ]]; then
      k3s_type=server
      # Filter out the label, it's not a valid label we can set
      continue
    fi
    # shellcheck disable=SC2016
    label_config=$(yq -y --arg l "$label" '.["node-label"]+=[$l]' <<<"$label_config")
  done
  printf '%s\n' "$label_config" >/etc/rancher/k3s/config.yaml.d/node-label.yaml

  if [[ -e /run/initramfs/cluster-secrets.json ]]; then
    # shellcheck disable=SC2016
    (umask 0077; yq '{token: .["k3s-token"]}' /run/initramfs/cluster-secrets.json >/etc/rancher/k3s/config.yaml.d/token.yaml)
    yq '{server: (.["control-plane-addrs"] | first)}' /run/initramfs/cluster-secrets.json >/etc/rancher/k3s/config.yaml.d/server.yaml
  fi
  ln -sf "$k3s_type.yaml" /etc/rancher/k3s/config.yaml
}

main "$@"
