#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit nullglob
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  # shellcheck source=workloads/settings/env/settings.shellcheck.sh
  source "$PKGROOT/workloads/settings/env/settings.sh"
  eval_settings

  DOC="node - Manage kubernetes nodes and images
Usage:
  images list
  images whitelist add DIGEST_FILE
  images whitelist del UKI_SHA256
"
# docopt parser below, refresh this parser with `docopt.sh images`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:131};usage=${DOC:42:89}
digest=b518f;options=();node_0(){ value DIGEST_FILE a;};node_1(){ value \
UKI_SHA256 a;};node_2(){ switch list a:list;};node_3(){ switch whitelist \
a:whitelist;};node_4(){ switch add a:add;};node_5(){ switch del a:del;}
node_6(){ sequence 3 4 0;};node_7(){ sequence 3 5 1;};node_8(){ choice 2 6 7;}
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:42:89}" >&2;exit 1;}';local varnames=(DIGEST_FILE UKI_SHA256 list \
whitelist add del) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 8 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;eval $p'DIGEST_FILE=${var_DIGEST_'\
'FILE:-};'$p'UKI_SHA256=${var_UKI_SHA256:-};'$p'list=${var_list:-false};'$p'wh'\
'itelist=${var_whitelist:-false};'$p'add=${var_add:-false};'$p'del=${var_del:-'\
'false};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' images`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  if $list; then
    local images=[] digestfile name uki_sha256
    for digestfile in $(exec_server "shopt -s nullglob; printf '%s\n' /images/*/digests.json" 2>/dev/null); do
      name=${digestfile#'/images/'}
      name=${name%'/digests.json'}
      uki_sha256=$(exec_server "jq -r .uki.sha256 $digestfile")
      images=$(jq --arg name "$name" --arg uki_sha256 "$uki_sha256" \
        '. += [{"name": $name, "uki_sha256": $uki_sha256, "location": "cluster"}]' <<<"$images"
      )
    done
    for digestfile in $(exec_server "shopt -s nullglob; printf '%s\n' /attestation-database/pcr-whitelist/*.json"); do
      name=$(exec_server "stat -c%W $digestfile")
      name=$(date '+%Y-%m-%d %H:%M:%S%z' --date="@$name")
      uki_sha256=$(exec_server "jq -r .uki.sha256 $digestfile")
      images=$(jq --arg name "$name" --arg uki_sha256 "$uki_sha256" \
        '. += [{"name": $name, "uki_sha256": $uki_sha256, "location": "whitelist"}]' <<<"$images"
      )
    done
    for digestfile in "$PKGROOT/images"/*/digests.json; do
      name=${digestfile#"$PKGROOT/images/"}
      name=${name%'/digests.json'}
      uki_sha256=$(jq -r .uki.sha256 "$digestfile")
      images=$(jq --arg name "$name" --arg uki_sha256 "$uki_sha256" \
        '. += [{"name": $name, "uki_sha256": $uki_sha256, "location": "local"}]' <<<"$images"
      )
    done
    jq -r '.[] | [.name, .location, .uki_sha256] | @tsv' <<<"$images" | column -ts $'\t' -n "images" -N "Name,Location,UKI SHA256"
  elif $whitelist; then
    if $add; then
      local uki_sha256
      uki_sha256=$(jq -r '.uki.sha256' "$DIGEST_FILE")
      exec_server "mkdir -p /attestation-database/pcr-whitelist"
      if ! exec_server "test -e /attestation-database/pcr-whitelist/$uki_sha256.json" 2>/dev/null; then
        # shellcheck disable=SC2002
        kubectl cp -c safeboot-attest "$DIGEST_FILE" "node/boot-server-0:/attestation-database/pcr-whitelist/$uki_sha256.json"
        info "The image with the uki sha256 %s has been whitelisted" "$uki_sha256"
      else
        info "The image with the uki sha256 %s is already whitelisted" "$uki_sha256"
      fi
    elif $del; then
      # shellcheck disable=SC2153
      exec_server "rm -rf /attestation-database/pcr-whitelist/$UKI_SHA256"
      info "The whitelist entry with the UKI SHA256 %s has been removed" "$UKI_SHA256"
    fi
  fi
}

exec_server() {
  kubectl exec -n node -c safeboot-attest boot-server-0 -- bash -c "$@"
}

kubectl() {
  KUBECONFIG=$HOME/.kube/home-cluster.yaml command kubectl --context home-cluster "$@"
}

main "$@"
