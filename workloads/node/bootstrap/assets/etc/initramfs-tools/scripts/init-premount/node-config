#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit
[[ $1 != prereqs ]] || { echo "find-boot-server"; exit 0; }

# shellcheck disable=SC1091
source /scripts/functions
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
# shellcheck source=../common.sh
source "$PKGROOT/common.sh"

main() {
  local \
    encrypted_node_config_path=/run/initramfs/boot/node-config.enc.json \
    node_key_path=/run/initramfs/boot/home-cluster/node-key \
    encrypted_node_config
  # shellcheck disable=SC2064
  trap "rm -f $NODE_CONFIG_PATH.tmp" EXIT
  if [[ -e $encrypted_node_config_path ]]; then
    info "Decrypting node-config from %s" "$encrypted_node_config_path"
    if decrypt_node_config "$node_key_path" "$(cat "$encrypted_node_config_path")" > "$NODE_CONFIG_PATH.tmp" 2>/dev/null; then
      mv "$NODE_CONFIG_PATH.tmp" "$NODE_CONFIG_PATH"
    else
      warning "Failed to decrypt node-config on boot partition"
    fi
  fi
  # Download config from boot-server, there might be a newer version (but keep the one from the boot partition so we have a fallback if we don't succeed)
  local encrypted_node_config
  if encrypted_node_config=$(download_node_config); then
    if decrypt_node_config "$node_key_path" "$encrypted_node_config" > "$NODE_CONFIG_PATH.tmp"; then
      mv "$NODE_CONFIG_PATH.tmp" "$NODE_CONFIG_PATH"
      # Update the node-config for this machine on the boot partition
      [[ ! -e /run/initramfs/boot ]] || printf "%s\n" "$encrypted_node_config" > $encrypted_node_config_path
    else
      warning "Failed to decrypt downloaded node-config"
    fi
  fi
}

main "$@"
