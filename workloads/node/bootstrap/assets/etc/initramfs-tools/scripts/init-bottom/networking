#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit
# Make sure we can write the networking config
[[ $1 != prereqs ]] || { echo "overlayroot"; exit 0; }

# shellcheck disable=SC1091
source /scripts/functions
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
# shellcheck source=../common.sh
source "$PKGROOT/common.sh"

main() {
  local hostname primary_mac
  if [[ -e $NODE_CONFIG ]]; then
    if hostname=$(jq -re '.hostname' "$NODE_CONFIG"); then
      :
    elif primary_mac=$(get_node_state primary-mac); then
      warning "No hostname defined in node-config, using primary-mac from node-state.json"
      hostname=${primary_mac//:/-}
    else
      warning "No hostname defined in node-config and primary-mac not found in node-state, generating random hostname"
      hostname=$(xxd -p -l4 /dev/random)
    fi
    local network
    for network in $(jq -r '(.networks // []) | keys[]' "$NODE_CONFIG"); do
      info "Configuring network $network"
      config=$(jq -r --arg network "$network" '.networks[$network]' "$NODE_CONFIG")
      # shellcheck disable=SC2154
      printf "%s\n" "$config" >"$rootmnt/etc/systemd/network/$network.network"
    done
  elif primary_mac=$(get_node_state primary-mac); then
    warning "No node-config found, using primary-mac from node-state.json to configure primary network interface and hostname"
    # shellcheck disable=SC2154
    cat <<EOF >"$rootmnt/etc/systemd/network/primary.network"
[Match]
MACAddress=$primary_mac

[Network]
DHCP=yes
EOF
    hostname=${primary_mac//:/-}
  else
    panic "Failed to configure networking: No node-config found primary-nic not present in node-state.json"
  fi

  info "Configuring hostname for node as %s" "$hostname"
  # shellcheck disable=SC2154
  printf "%s\n" "$hostname" >"$rootmnt/etc/hostname"
  set_node_state hostname "$hostname"
}

main "$@"
