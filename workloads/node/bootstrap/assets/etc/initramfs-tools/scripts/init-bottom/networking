#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit
case $1 in
  # Download the settings first and make sure we can write the networking config
  prereqs) echo "settings overlayroot"; exit 0;;
esac

PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
# shellcheck source=../common.sh
source "$PKGROOT/common.sh"

settings_path=/run/initramfs/node-settings.json
if [ ! -e "$settings_path" ]; then
  warning "Skipping networking setup. $settings_path does not exist"
  exit 0
fi

hostname=$(jq -r '.hostname // "node"' "$settings_path")

for network in $(jq -r '(.networks // []) | keys[]' "$settings_path"); do
  info "Configuring network $network"
  if ! nic_name=$(jq -re --arg network "$network" '.networks[$network].nic' "$settings_path"); then
    warning "$network has no nic defined, skipping"
    continue
  fi
  net_conf=$(printf '[Match]\nName=%s\n\n[Network]' "$nic_name")
  addrs=$(jq -r --arg network "$network" '(.networks[$network].addrs // [])[]' "$settings_path")
  if [ -n "$addrs" ]; then
    # shellcheck disable=SC2086
    net_conf="${net_conf}$(printf "\nAddress=%s" $addrs)"
  else
    net_conf="${net_conf}
DHCP=yes"
  fi
  # shellcheck disable=SC2154
  printf "%s\n" "$net_conf" >"$rootmnt/etc/systemd/network/$network.network"
done

if hostname=$(jq -re '.hostname' "$settings_path"); then
  printf "%s\n" "$hostname" >"$rootmnt/etc/hostname"
  info "Configured hostname for node as $hostname"
else
  warning "node has no hostname defined"
fi
