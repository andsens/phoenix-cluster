#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit
case $1 in
  # We don't have any prerequirements
  prereqs) echo ""; exit 0;;
esac

# shellcheck disable=SC1091
source /scripts/functions
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
# shellcheck source=../common.sh
source "$PKGROOT/common.sh"

if ! boot_server=$(get_boot_state boot-server); then
  warning "Skipping download/copy of settings: ROOTSERVER not found in DHCP lease"
fi

settings_path=/run/initramfs/node-settings.json
# Run through all NIC MACs (except loopback) and find one that matches a node setting
info "Copying/downloading settings from boot partition and/or boot-server"
for mac in $(ip -o link show | grep -v ' lo: ' | grep -Eo 'link/[^ ]+ [^ ]+' | cut -d ' ' -f2); do
  settings_filename=$(printf "%s" "$mac" | sed s/:/-/g).json
  if cp "/run/initramfs/boot/home-cluster/node-settings/$settings_filename" "$settings_path.tmp" 2>/dev/null; then
    mv "$settings_path.tmp" "$settings_path"
  fi
  if [[ -n $boot_server ]]; then
    # Download settings from boot-server, there might be a newer version (but keep the one from the boot partition so we have a fallback if we don't succeed)
    if curl -fsL --connect-timeout 5 --retry 3 -o "$settings_path.tmp" "http://${boot_server}:8020/node-settings/$settings_filename"; then
      mv "$settings_path.tmp" "$settings_path"
      # Update the node-settings for this machine on the boot partition
      cp "$settings_path" "/run/initramfs/boot/home-cluster/node-settings/$settings_filename"
    fi
  fi

  # Quit as soon as we have a node-settings.json
  if [ -e "$settings_path" ]; then
    info "Found settings for %s" "$mac"
    exit 0
  fi
done
err=''
for link in $(ip -o link show | grep -v ' lo: ' | grep -Eo '^[0-9]: [^ :]+' | cut -d ' ' -f2); do
  err=${err}$(printf "%s: %s" "$link" "$(ip -o link show "$link" | grep -Eo 'link/[^ ]+ [^ ]+' | cut -d ' ' -f2)")
done
panic "None of the following MAC addresses match a node in settings:
$err"
exit 1
