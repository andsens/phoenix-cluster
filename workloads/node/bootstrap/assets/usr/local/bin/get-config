#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit

main() {
  local e; for e; do [[ "$e" != "--help" ]] || usage; done
  [[ -n $1 && $# -ge 1 && $# -le 4 ]] || usage
  local quiet=false
  if [[ $1 = '-q' ]]; then quiet=true; shift; fi
  local filepath=$1 key=$2 default=$3 real_filepath contents schema
  schema=$(basename "$filepath" .yaml)
  if [[ -e $filepath ]]; then
    real_filepath=$(realpath "$filepath")
    contents=$(cat "$real_filepath")
    if [[ $real_filepath = /boot/* ]] && ! ssh-keygen -q -Y verify -f <(sed 's/^/admin /g' </home/admin/.ssh/authorized_keys) -I admin -n file -s "$real_filepath.sig" <<<"$contents"; then
      printf "Failed to verify signature of %s using /home/admin/.ssh/authorized_keys\n" "$real_filepath" >&2
      return 1
    fi
    local validation_errors
    if ! validation_errors=$(jsonschema -i <(yq . <<<"$contents") <(yq . "/usr/local/lib/phxc/schemas/$schema.schema.yaml") 2>&1); then
      fatal 'Failed to validate "%s". Errors: %s' "$filepath" "$validation_errors"
    fi
    if [[ -n $key ]]; then
      if yq -r 'paths | join(".")' <<<"$contents" | grep -q "^$key$"; then
        key=$(escape_key "$key")
        yq -r ".$key" <<<"$contents"
      elif [[ -n $default ]]; then
        printf "%s\n" "$default"
      else
        $quiet || printf "%s is not set in '%s'\n" "$key" "$filepath" >&2
        return 1
      fi
    else
      printf "%s\n" "$contents"
    fi
  elif [[ -n $default ]]; then
    printf "%s\n" "$default"
  else
    $quiet || printf "%s does not exist\n" "$filepath" >&2
     return 1
  fi
}

escape_key() {
  # Converts any path like some-path.to-something.here
  # into ["some-path"]["to-something"]["here"]
  # This means dots in keys are not allowed
  local key=$1
  key=${key//'.'/'"]["'}
  key="[\"$key\"]"
  printf "%s\n" "$key"
}

usage() {
  printf "Usage: get-config [-q] FILEPATH [KEY [DEFAULT]]\n" >&2
  return 1
}

main "$@"
