#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit

main() {
  local e; for e; do [[ "$e" != "--help" ]] || usage; done
  local resource wait=false
  if [[ $1 = '--wait' ]]; then
    wait=true
    shift
  fi
  [[ $# -eq 1 ]] || usage
  resource=$1
  # shellcheck disable=SC2153
  local resource=${resource//[^A-Za-z0-9_]/_}
  type "${resource}_ready" &>/dev/null || { printf 'Unknown resource: "%s"\n' "$resource" >&2; return 1; }

  # shellcheck disable=SC2154
  if $wait; then
    until "${resource}_ready" &>/dev/null; do
      sleep 1
    done
    printf "%s is ready\n" "$resource" >&2
    return 0
  else
    if "${resource}_ready" &>/dev/null; then
      printf "%s is ready\n" "$resource" >&2
      return 0
    else
      printf "%s is not ready\n" "$resource" >&2
      return 1
    fi
  fi
}

boot_server_ready() {
  boot-server-available
}

k3s_ready() {
  kubectl get -n default endpoints kubernetes -ojsonpath='{.subsets[0].addresses}' | jq -e 'length > 0' &>/dev/null
}

cilium_ready() {
  deployment_ready kube-system cilium-operator
}

coredns_ready() {
  deployment_ready kube-system coredns
}

smallstep_namespace_ready() {
  namespace_ready smallstep
}

node_namespace_ready() {
  namespace_ready node
}

step_ca_ready() {
  statefulset_ready smallstep step-ca
}

deployment_ready() {
  local ns=$1 deployment=$2
  [[ $(kubectl get -n "$ns" deployment "$deployment" -ojsonpath='{.status.readyReplicas}') -gt 0 ]] || return 1
}

statefulset_ready() {
  local ns=$1 sts=$2
  [[ $(kubectl get -n "$ns" statefulset "$sts" -ojsonpath='{.status.readyReplicas}') -gt 0 ]] || return 1
}

pod_ready() {
  local ns=$1 pod=$2
  kubectl -n "$ns" get pod "$pod" -o=jsonpath='{.status.conditions}' | jq -re 'any(.[] | select(.type == "Ready"); .status == "True")' >/dev/null
}

namespace_ready() {
  local ns=$1
  [[ $(kubectl get namespace "$ns" -o jsonpath='{.status.phase}' 2>/dev/null) = 'Active' ]] || return 1
}

usage() {
  printf "Usage: resource-ready [--wait] RESOURCE\n" >&2
  return 1
}

main "$@"
