#!/usr/bin/env bash
set -Eeo pipefail; shopt -s inherit_errexit

main() {
  local e; for e; do [[ "$e" != "--help" ]] || usage; done
  local allow_fallback=false
  if [[ $1 = -f ]]; then
    allow_fallback=true
    shift
  fi
  [[ $# -le 1 ]] || usage
  local node_config_dest=$1 \
    primary_mac jwt retry=15 node_config
  if primary_mac=$(get-node-state primary-mac); then
    while true; do
      if boot-server-available; then
        jwt=$(sign-jwt node-config)
        if node_config=$(curl-boot-server "registry/node-configs/${primary_mac//:/-}.json?jwt=$jwt"); then
          printf "Successfully downloaded node-config\n" >&2
          break
        else
          printf "Failed to download node-config, retrying in %ds\n" "$retry" >&2
        fi
      else
        if [[ -e /boot/home-cluster/node-config.json.enc ]] && $allow_fallback; then
          printf "boot-server is not available and cached node-config exists, using that instead\n" >&2
          node_config=$(systemd-creds decrypt /boot/home-cluster/node-config.json.enc)
          break
        else
          printf "boot-server is not available, retrying in %ds\n" "$retry" >&2
        fi
      fi
      sleep $retry
    done
  else
    if [[ -e /boot/home-cluster/node-config.json.enc ]] && $allow_fallback; then
      printf "Cached node-config exists, using that instead\n" >&2
      node_config=$(systemd-creds decrypt /boot/home-cluster/node-config.json.enc)
    else
      return 1
    fi
  fi
  if [[ -z $node_config_dest || $node_config_dest = '-' ]]; then
    printf "%s\n" "$node_config"
  else
    printf "%s\n" "$node_config" >"$node_config_dest"
  fi
}

usage() {
  printf "Usage: download-node-config [-f] [DEST]
Options:
  -f  Fall back to decrypting the cached node-config
" >&2
  return 1
}

main "$@"
