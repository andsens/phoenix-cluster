#!/usr/bin/env bash
# shellcheck source-path=../../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=/usr/local/lib/upkg

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  DOC="attest-verify - Check an attested PCR quote
Usage:
  attest-verify EK_HASH PAYLOAD_DIR
"
# docopt parser below, refresh this parser with `docopt.sh attest-verify`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:86};usage=${DOC:44:42}
digest=64b2f;options=();node_0(){ value EK_HASH a;};node_1(){ value \
PAYLOAD_DIR a;};node_2(){ sequence 0 1;};cat <<<' docopt_exit() { [[ -n $1 ]] \
&& printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:44:42}" >&2;exit 1;}';local \
varnames=(EK_HASH PAYLOAD_DIR) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 2 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'EK_HASH=${var_'\
'EK_HASH:-};'$p'PAYLOAD_DIR=${var_PAYLOAD_DIR:-};';local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' attest-verify`
  eval "$(docopt "$@")"

  local pcr4_sha256
  pcr4_sha256=$(yq -r '.pcrs.sha256["4"]' "$PAYLOAD_DIR/quote.yaml")
  if ! find_pcr4_match "$pcr4_sha256"; then
    fatal "Unable to find match for PCR 4 among known images"
  fi

  # TODO: verify EK

  return 0
}

find_pcr4_match() {
  # Lowercase with ",,"
  local pcr4_sha256=${1,,} \
    init_sha256 start_sha256 barrier_sha256
  init_sha256=$(printf "0000000000000000000000000000000000000000000000000000000000000000")
  start_sha256=$(printf "Calling EFI Application from Boot Option" | sha256)
  barrier_sha256=$(printf "00000000" | xxd -r -p | sha256)
  local imgdir sha256_shim sha256_vmlinuz sha256_candidate
  for imgdir in /images/*; do
    [[ -e "$imgdir/shim.efi.digest.json" && -e "$imgdir/vmlinuz.efi.digest.json" ]] || continue
    sha256_shim=$(jq -r '.sha256' "$imgdir/shim.efi.digest.json")
    sha256_vmlinuz=$(jq -r '.sha256' "$imgdir/vmlinuz.efi.digest.json")
    sha256_candidate=$(sha256_extend "$init_sha256" "$start_sha256" "$barrier_sha256" "$sha256_shim" "$sha256_vmlinuz")
    if [[ $pcr4_sha256 = "$sha256_candidate" ]]; then
      info "%s: SHA256 of PCR4 matches image at %s" "$EK_HASH" "$imgdir"
      return 0
    fi
  done
  return 1
}

sha256() {
  sha256sum | cut -d ' ' -f1
}

sha256_extend() {
  local next_sha256 result
  while [[ $# -gt 0 ]]; do
    next_sha256=$1
    shift
    if [[ -n $result ]]; then
      result=$( (xxd -r -p <<<"$result"; xxd -r -p <<<"$next_sha256") | sha256 )
    else
      result=$next_sha256
    fi
  done
  printf "%s" "$result"
}

main "$@"
