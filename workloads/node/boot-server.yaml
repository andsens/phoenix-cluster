---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: boot-server
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: boot-server
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
rules:
- apiGroups: [""]
  resources: [nodes]
  verbs: [get, list]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: boot-server
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: boot-server
subjects:
- kind: ServiceAccount
  name: boot-server
---
apiVersion: v1
kind: Service
metadata:
  name: boot-server
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
  ports:
  - name: http
    port: 80
    targetPort: http
---
apiVersion: secretgenerator.mittwald.de/v1alpha1
kind: StringSecret
metadata:
  name: disk-encryption-key
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
spec:
  fields:
  - fieldName: password
    encoding: base64url
    length: "32"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: boot-server
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/component: boot-server
spec:
  serviceName: boot-server
  selector:
    matchLabels:
      app.kubernetes.io/name: node
      app.kubernetes.io/component: boot-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node
        app.kubernetes.io/component: boot-server
    spec:
      serviceAccountName: boot-server
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      hostNetwork: true
      containers:
      - name: nginx
        image: nginx:1.27-alpine-slim
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: node-settings
          mountPath: /node-settings
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: images
          mountPath: /images
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
      - name: safeboot-attest
        image: cluster.local/safeboot-attest:latest
        imagePullPolicy: Never
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - name: http
          containerPort: 8000
        volumeMounts:
        - name: scripts
          mountPath: /usr/local/lib/safeboot-attest/attest-server.py
          subPath: attest-server.py
        - name: scripts
          mountPath: /usr/local/lib/safeboot-attest/attest-verify
          subPath: attest-verify
        - name: images
          mountPath: /images
          readOnly: true
        - name: k3s-token
          mountPath: /secrets/k3s-token
          readOnly: true
        - name: disk-encryption-key
          mountPath: /secrets/disk-encryption-key
          subPath: password
          readOnly: true
        - name: attestation-database
          mountPath: /attestation-database
        - name: safeboot-attest-tmp
          mountPath: /tmp
      - name: tftpd
        image: cluster.local/tftpd:latest
        imagePullPolicy: Never
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop: [ALL]
            add:
            - NET_BIND_SERVICE
            - SETUID
            - SETGID
            - SYS_CHROOT
        ports:
        - name: tftp
          containerPort: 69
          hostPort: 69
        volumeMounts:
        - name: config
          mountPath: /config/map-file
          subPath: tftpd-map-file
        - name: images
          mountPath: /tftp/images
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: boot-server-config
      - name: scripts
        configMap:
          name: boot-server-scripts
          defaultMode: 0755
      - name: node-settings
        configMap:
          name: node-settings
      - name: images
        persistentVolumeClaim:
          claimName: images
      - name: k3s-token
        hostPath:
          path: /var/lib/rancher/k3s/server/token
          type: File
      - name: disk-encryption-key
        secret:
          secretName: disk-encryption-key
      - name: nginx-cache
        emptyDir: {}
      - name: safeboot-attest-tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: attestation-database
      labels:
        app.kubernetes.io/name: node
        app.kubernetes.io/component: boot-server
    spec:
      storageClassName: longhorn
      accessModes: [ReadWriteOnce]
      resources: {requests: {storage: 1Mi}}
