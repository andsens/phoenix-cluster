---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: backup-server
  labels:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: backup-server
      app.kubernetes.io/component: backup-server
  ingress:
  - toPorts:
    - ports:
      - port: "8050"
    fromEntities:
    - all
---
apiVersion: v1
kind: Service
metadata:
  name: backup-server
  labels:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
  ports:
  - name: backup-server
    port: 8050
    targetPort: backup
---
apiVersion: v1
kind: Service
metadata:
  name: backup-server-host
  labels:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
  ports:
  - name: backup-server
    port: 8050
    nodePort: 8050
    targetPort: backup
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: backup-server
  labels:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
spec:
  commonName: backup-server.phxc.svc.cluster.local
  issuerRef:
    group: certmanager.step.sm
    kind: StepClusterIssuer
    name: step-issuer
  secretName: backup-server-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-server
  labels:
    app.kubernetes.io/name: backup-server
    app.kubernetes.io/component: backup-server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: backup-server
      app.kubernetes.io/component: backup-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backup-server
        app.kubernetes.io/component: backup-server
    spec:
      initContainers:
      - name: copy-certs
        image: busybox:1.37.0
        command: [/bin/sh, -ec]
        args: ['cp /certs/* /var/www/certs; chown 101:101 /var/www/certs/*']
        volumeMounts:
        - name: certs
          mountPath: /var/www/certs
        - name: phxc-root-cert
          mountPath: /certs/phxc-root.crt
        - name: kube-apiserver-server-ca-cert
          mountPath: /certs/kube-apiserver-server-ca-cert.crt
        - name: kube-apiserver-client-ca-cert
          mountPath: /certs/kube-apiserver-client-ca-cert.crt
        - name: secureboot
          mountPath: /certs/secureboot.crt
          subPath: tls.crt
      containers:
      - name: backup-server
        image: nginx:1.27.3
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - name: backup
          containerPort: 8050
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: backup-server-tls
          mountPath: /etc/nginx/tls
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: certs
          mountPath: /var/www/certs
      volumes:
      - name: config
        configMap:
          name: backup-server-config
      - name: backup-server-tls
        secret:
          secretName: backup-server-tls
      - name: certs
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}

      - name: phxc-root-cert
        hostPath:
          path: /usr/local/share/ca-certificates/phxc-root.crt
          type: File
      - name: kube-apiserver-server-ca-cert
        hostPath:
          path: /var/lib/rancher/k3s/agent/server-ca.crt
          type: File
      - name: kube-apiserver-client-ca-cert
        hostPath:
          path: /var/lib/rancher/k3s/agent/client-ca.crt
          type: File
      - name: secureboot
        secret:
          secretName: secureboot
