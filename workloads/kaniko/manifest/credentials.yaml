apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: kaniko
  name: create-kaniko-docker-config
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: docker-registry
  name: read-kaniko-credentials
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
rules:
- apiGroups: [""]
  resources: [secrets]
  resourceNames: [kaniko-credentials]
  verbs: [get]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: docker-registry
  name: kaniko-read-kaniko-credentials
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: read-kaniko-credentials
subjects:
- kind: ServiceAccount
  namespace: kaniko
  name: create-kaniko-docker-config
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: kaniko
  name: create-kaniko-docker-config
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
rules:
- apiGroups: [""]
  resources: [secrets]
  verbs: [create]
- apiGroups: [""]
  resources: [secrets]
  resourceNames: [kaniko-docker-config]
  verbs: [get, delete]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: kaniko
  name: create-kaniko-docker-config
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-kaniko-docker-config
subjects:
- kind: ServiceAccount
  namespace: kaniko
  name: create-kaniko-docker-config
---
apiVersion: batch/v1
kind: Job
metadata:
  namespace: kaniko
  name: create-kaniko-docker-config
  labels:
    app.kubernetes.io/name: kaniko
    app.kubernetes.io/component: create-kaniko-docker-config
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kaniko
        app.kubernetes.io/component: create-kaniko-docker-config
        cluster.local/allow-internet-egress: "true"
        cluster.local/allow-apiserver-egress: "true"
    spec:
      restartPolicy: Never
      serviceAccountName: create-kaniko-docker-config
      securityContext:
        fsGroup: 1000
      containers:
      - name: create-kaniko-docker-config
        image: distribution.docker-registry.svc.cluster.local/home-cluster-base:latest
        command: [/var/lib/home-cluster/workloads/kaniko/commands/create-kaniko-docker-config.sh]
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: home-cluster
          mountPath: /var/lib/home-cluster
          readOnly: true
      volumes:
      - name: home-cluster
        nfs:
          server: nfsShares.homeCluster.addr
          path: nfsShares.homeCluster.path
          readOnly: true
