#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")

  DOC="exclusive-mok - Ensure only the cluster SB cert is enrolled in the MOK DB
Usage:
  exclusive-mok [options]

Options:
  -n --dry-run  Only check if the MOK DB needs modification
"
# docopt parser below, refresh this parser with `docopt.sh exclusive-mok`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:176};usage=${DOC:74:32}
digest=ceab8;options=('-n --dry-run 0');node_0(){ switch __dry_run 0;};node_1(){
optional 0;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:74:32}" >&2;exit 1;}';local varnames=(__dry_run) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 1 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__dry_run=${var___dry_run:-false};';local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do
for varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' exclusive-mok`
  eval "$(docopt "$@")"

  local tmp crt home_cluster_cn mok_changed=false is_enrolled=false
  home_cluster_cn=$(get_cn /etc/home-cluster/secureboot.der)
  tmp=$(mktemp -d)
  # shellcheck disable=SC2064
  trap "rm -rf \"$tmp\"" EXIT
  (cd "$tmp"; mokutil --export)
  for crt in "$tmp"/*.der; do
    if diff -q "$crt" /etc/home-cluster/secureboot.der 2>/dev/null; then
      info "Certificate '%s' found in MOK DB" "$home_cluster_cn"
      is_enrolled=true
    else
      # shellcheck disable=SC2154
      if $__dry_run; then
        info "Unwanted certificate '%s' found in MOK DB" "$(get_cn "$crt")"
      else
        info "Removing certificate '%s' from MOK DB" "$(get_cn "$crt")"
        printf "password\npassword\n" | mokutil --delete "$crt"
      fi
      mok_changed=true
    fi
  done
  if ! $is_enrolled; then
    if $__dry_run; then
      info "Certificate '%s' not found in MOK DB" "$home_cluster_cn"
    else
      info "Certificate '%s' not found in MOK DB, enrolling now" "$home_cluster_cn"
      printf "password\npassword\n" | mokutil --import /etc/home-cluster/secureboot.der
    fi
    mok_changed=true
  fi
  if $mok_changed; then
    if $__dry_run; then
      info "The MOK DB must be updated."
      return 1
    else
      warning "The MOK DB has been changed. The system will reboot and you will be presented with the MOK Manager."
      warning "Confirm the delete/import actions that were enqueued and continue booting."
      sleep 10
      return 1
    fi
  else
    info "MOK DB only has home-cluster secureboot certificate enrolled."
  fi
  return 0
}

get_cn() {
  step certificate inspect --format json "$1" | jq -r '.subject.common_name[]'
}

main "$@"
