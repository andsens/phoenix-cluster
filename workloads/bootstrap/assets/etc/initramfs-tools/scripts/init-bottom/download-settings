#!/bin/sh
set -e
# We don't have any prerequirements
case $1 in
prereqs)
  exit 0
  ;;
esac

# shellcheck disable=SC1091
. /scripts/functions

# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
  case $x in
  rootimg.addr=*)
    img_addr=${x#rootimg.addr=}
    ;;
  esac
done
if [ -z "${img_addr}" ]; then
  log_warning_msg "Skipping download of settings. Boot argument rootimg.addr= not specified"
  exit 0
fi

configure_networking
boot_server=$img_addr
boot_proto=${boot_server%%:*}
boot_server=${boot_server#"$boot_proto:"}
boot_server=${boot_server#'//'} # double slash not guaranteed, hence the separate removal
boot_server=${boot_server%%\/*}

# Get the NIC MAC we use to contact the boot server
if ! link=$(ip -o route get to "$boot_server" | grep -Eo 'dev [^ ]+' | cut -d ' ' -f2); then
  log_failure_msg "Unable to determine interface used to contact $boot_server, aborting node-settings.json download"
  exit 1
fi
if ! mac=$(ip link show "$link" | tail -n1 | grep -Eo '([a-f0-9]{2}:){5}[a-f0-9]{2}' | head -n1); then
  log_failure_msg "Unable to determine the MAC address of the interface $link, aborting node-settings.json download"
  exit 1
fi

settings_path=/run/initramfs/node-settings.json
settings_url=$boot_proto://$boot_server/$mac.json

log_begin_msg "Downloading settings from $settings_url"
if ! wget -qO"$settings_path" "$settings_url"; then
  log_failure "Failed to download."
  exit 1
fi
log_end_msg
