apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-kube-apiserver-client-ca-secret
  labels:
    app.kubernetes.io/name: docker-registry
    app.kubernetes.io/component: create-kube-apiserver-client-ca-secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-kube-apiserver-client-ca-secret
  labels:
    app.kubernetes.io/name: docker-registry
    app.kubernetes.io/component: create-kube-apiserver-client-ca-secret
rules:
- apiGroups: [""]
  resources: [secrets]
  verbs: [create]
- apiGroups: [""]
  resources: [secrets]
  resourceNames: [kube-apiserver-client-ca]
  verbs: [get, delete]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-kube-apiserver-client-ca-secret
  labels:
    app.kubernetes.io/name: docker-registry
    app.kubernetes.io/component: create-kube-apiserver-client-ca-secret
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-kube-apiserver-client-ca-secret
subjects:
- kind: ServiceAccount
  name: create-kube-apiserver-client-ca-secret
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kube-apiserver-client-ca-secret
  labels:
    app.kubernetes.io/name: docker-registry
    app.kubernetes.io/component: create-kube-apiserver-client-ca-secret
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-registry
        app.kubernetes.io/component: create-kube-apiserver-client-ca-secret
        cluster.local/allow-apiserver-egress: "true"
    spec:
      nodeSelector:
        kubernetes.io/hostname: machines.k8sMaster.hostname
      restartPolicy: Never
      serviceAccountName: create-kube-apiserver-client-ca-secret
      securityContext:
        fsGroup: 1000
      containers:
      - name: create-kube-apiserver-client-ca-secret
        image: cr.step.sm/smallstep/step-ca-bootstrap:latest
        command: [/var/lib/home-cluster/workloads/smallstep/commands/create-kube-apiserver-client-ca-secret.sh]
        args: [/certs/kube_apiserver_client_ca.crt]
        securityContext:
          readOnlyRootFilesystem: true
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: home-cluster
          mountPath: /var/lib/home-cluster
          readOnly: true
        - name: kube-apiserver-client-ca-cert
          mountPath: /certs/kube_apiserver_client_ca.crt
          readOnly: true
      volumes:
      - name: home-cluster
        nfs:
          server: nfsShares.homeCluster.addr
          path: nfsShares.homeCluster.path
          readOnly: true
      - name: kube-apiserver-client-ca-cert
        hostPath:
          path: /var/lib/persistent/lib-rancher/k3s/server/tls/client-ca.crt
          type: File
