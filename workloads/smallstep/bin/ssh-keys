#!/usr/bin/env bash
# shellcheck source-path=../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  source "$PKGROOT/.upkg/path-tools/path-tools.sh"
  PATH=$(path_prepend "$PKGROOT/.upkg/.bin")
  [[ ! -r /etc/rancher/k3s/k3s.yaml ]] || export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

  DOC="ssh-keys - Manage ssh-keys
Usage:
  ssh-keys sign-host
  ssh-keys download-ca DEST
"
# docopt parser below, refresh this parser with `docopt.sh ssh-keys`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:82};usage=${DOC:27:55}
digest=4c10f;options=();node_0(){ value DEST a;};node_1(){ switch sign_host \
a:sign-host;};node_2(){ switch download_ca a:download-ca;};node_3(){ sequence \
2 0;};node_4(){ choice 1 3;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf \
"%s\n" "$1" >&2;printf "%s\n" "${DOC:27:55}" >&2;exit 1;}';local \
varnames=(DEST sign_host download_ca) varname;for varname in "${varnames[@]}"; \
do unset "var_$varname";done;parse 4 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'DEST=${var_DES'\
'T:-};'$p'sign_host=${var_sign_host:-false};'$p'download_ca=${var_download_ca:'\
'-false};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' ssh-keys`
  eval "$(docopt "$@")"

  if [[ ! -e "$(step path)/certs/root_ca.crt" ]]; then
    info "Bootstrapping Smallstep"
    step ca bootstrap \
      --ca-url "pki.$CLUSTER_DOMAIN:9000" \
      --fingerprint "$(step certificate fingerprint <(kubectl -n smallstep get secret smallstep-root -o=jsonpath='{.data.tls\.crt}' | base64 -d))"
  fi
  # shellcheck disable=2154
  if $sign_host; then
    local ssh_host_provisioner_password
    ssh_host_provisioner_password=$(kubectl -n smallstep get secret ssh-host-provisioner-password -o=jsonpath='{.data.password}' | base64 -d)
    local pubkey
    for pubkey in /etc/ssh/ssh_host_*.pub; do
      [[ $pubkey != *-cert.pub ]] || continue
      info "Signing %s" "$pubkey"
      step ssh certificate --host --sign --force --provisioner=ssh-host --provisioner-password-file=<(printf "%s" "$ssh_host_provisioner_password") \
        "$(hostname -f)" "$pubkey"
    done
    systemctl reload ssh
  elif $download_ca; then
    info "Downloading user CA keys to %s" "$DEST"
    step ssh config --host --roots >"$DEST"
    systemctl reload ssh
  fi
}

main "$@"
