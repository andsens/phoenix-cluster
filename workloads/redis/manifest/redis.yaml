---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: redis
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: redis
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - port: 6379
    from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: docker-registry
      podSelector:
        matchLabels:
          app.kubernetes.io/name: docker-registry
          app.kubernetes.io/component: distribution
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: redis
spec:
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: redis
  ports:
  - name: redis
    port: 6379
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: redis
spec:
  serviceName: redis
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          exec:
            command: [redis-cli, ping]
        readinessProbe:
          exec:
            command: [redis-cli, ping]
        volumeMounts:
        - name: config
          mountPath: /etc/redis
        - name: data
          mountPath: /data
      volumes:
      - name: config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: nas-nfs-workloads
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 1Gi
